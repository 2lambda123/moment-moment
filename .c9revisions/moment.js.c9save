{"ts":1349701240661,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// moment.js\n// version : 1.7.2\n// author : Tim Wood\n// license : MIT\n// momentjs.com\n\n(function (undefined) {\n\n    /************************************\n        Constants\n    ************************************/\n\n    var moment,\n        VERSION = \"1.7.2\",\n        round = Math.round, i,\n        // internal storage for language config files\n        languages = {},\n        currentLanguage = 'en',\n\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports),\n\n        // Parameters to check for on the lang config.  This list of properties\n        // will be inherited from English if not provided in a language\n        // definition.  monthsParse is also a lang config property, but it\n        // cannot be inherited and as such cannot be enumerated here.\n        langConfigProperties = 'months|monthsShort|weekdays|weekdaysShort|weekdaysMin|longDateFormat|calendar|relativeTime|ordinal|meridiem'.split('|'),\n\n        // ASP.NET json date format regex\n        aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i,\n\n        // format tokens\n        formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|SS?S?|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LT|LL?L?L?)/g,\n\n        // parsing tokens\n        parseMultipleFormatChunker = /([0-9a-zA-Z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)/gi,\n\n        // parsing token regexes\n        parseTokenOneOrTwoDigits = /\\d\\d?/, // 0 - 99\n        parseTokenOneToThreeDigits = /\\d{1,3}/, // 0 - 999\n        parseTokenThreeDigits = /\\d{3}/, // 000 - 999\n        parseTokenFourDigits = /\\d{1,4}/, // 0 - 9999\n        parseTokenWord = /[0-9a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+/i, // any word characters or numbers\n        parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i, // +00:00 -00:00 +0000 -0000 or Z\n        parseTokenT = /T/i, // T (ISO seperator)\n\n        // preliminary iso regex\n        // 0000-00-00 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000\n        isoRegex = /^\\s*\\d{4}-\\d\\d-\\d\\d(T(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d\\d?\\d?)?)?)?)?([\\+\\-]\\d\\d:?\\d\\d)?)?/,\n        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',\n\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.S', /(T?)\\d\\d:\\d\\d:\\d\\d\\.\\d{1,3}/],\n            ['HH:mm:ss', /(T?)\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /(T?)\\d\\d:\\d\\d/],\n            ['HH', /(T?)\\d\\d/]\n        ],\n\n        // timezone chunker \"+10:00\" > [\"10\", \"00\"] or \"-1530\" > [\"-15\", \"30\"]\n        parseTimezoneChunker = /([\\+\\-]|\\d\\d)/gi,\n\n        // getter and setter names\n        proxyGettersAndSetters = 'Month|Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),\n        unitMillisecondFactors = {\n            'Milliseconds' : 1,\n            'Seconds' : 1e3,\n            'Minutes' : 6e4,\n            'Hours' : 36e5,\n            'Days' : 864e5,\n            'Months' : 2592e6,\n            'Years' : 31536e6\n        },\n\n        // format function strings\n        formatFunctions = {},\n\n        // tokens to ordinalize and pad\n        ordinalizeTokens = 'DDD w M D d'.split(' '),\n        paddedTokens = 'M D H h m s w'.split(' '),\n\n        /*\n         * moment.fn.format uses new Function() to create an inlined formatting function.\n         * Results are a 3x speed boost\n         * http://jsperf.com/momentjs-cached-format-functions\n         *\n         * These strings are appended into a function using replaceFormatTokens and makeFormatFunction\n         */\n        formatTokenFunctions = {\n            // a = placeholder\n            // b = placeholder\n            // t = the current moment being formatted\n            // v = getValueAtKey function\n            // o = language.ordinal function\n            // p = leftZeroFill function\n            // m = language.meridiem value or function\n            M    : function () {\n                return this.month() + 1;\n            },\n            MMM  : function (format) {\n                return getValueFromArray(\"monthsShort\", this.month(), this, format);\n            },\n            MMMM : function (format) {\n                return getValueFromArray(\"months\", this.month(), this, format);\n            },\n            D    : function () {\n                return this.date();\n            },\n            DDD  : function () {\n                var a = new Date(this.year(), this.month(), this.date()),\n                    b = new Date(this.year(), 0, 1);\n                return ~~(((a - b) / 864e5) + 1.5);\n            },\n            d    : function () {\n                return this.day();\n            },\n            dd   : function (format) {\n                return getValueFromArray(\"weekdaysMin\", this.day(), this, format);\n            },\n            ddd  : function (format) {\n                return getValueFromArray(\"weekdaysShort\", this.day(), this, format);\n            },\n            dddd : function (format) {\n                return getValueFromArray(\"weekdays\", this.day(), this, format);\n            },\n            w    : function () {\n                var a = new Date(this.year(), this.month(), this.date() - this.day() + 5),\n                    b = new Date(a.getFullYear(), 0, 4);\n                return ~~((a - b) / 864e5 / 7 + 1.5);\n            },\n            YY   : function () {\n                return leftZeroFill(this.year() % 100, 2);\n            },\n            YYYY : function () {\n                return leftZeroFill(this.year(), 4);\n            },\n            a    : function () {\n                return this.lang().meridiem(this.hours(), this.minutes(), true);\n            },\n            A    : function () {\n                return this.lang().meridiem(this.hours(), this.minutes(), false);\n            },\n            H    : function () {\n                return this.hours();\n            },\n            h    : function () {\n                return this.hours() % 12 || 12;\n            },\n            m    : function () {\n                return this.minutes();\n            },\n            s    : function () {\n                return this.seconds();\n            },\n            S    : function () {\n                return ~~(this.milliseconds() / 100);\n            },\n            SS   : function () {\n                return leftZeroFill(~~(this.milliseconds() / 10), 2);\n            },\n            SSS  : function () {\n                return leftZeroFill(this.milliseconds(), 3);\n            },\n            Z    : function () {\n                var a = -this.zone(),\n                    b = \"+\";\n                if (a < 0) {\n                    a = -a;\n                    b = \"-\";\n                }\n                return b + leftZeroFill(~~(a / 60), 2) + \":\" + leftZeroFill(~~a % 60, 2);\n            },\n            ZZ   : function () {\n                var a = -this.zone(),\n                    b = \"+\";\n                if (a < 0) {\n                    a = -a;\n                    b = \"-\";\n                }\n                return b + leftZeroFill(~~(10 * a / 6), 4);\n            }\n        };\n\n    function getValueFromArray(key, index, m, format) {\n        var lang = m.lang();\n        return lang[key].call ? lang[key](m, format) : lang[key][index];\n    }\n\n    function padToken(func, count) {\n        return function (a) {\n            return leftZeroFill(func.call(this, a), count);\n        };\n    }\n    function ordinalizeToken(func) {\n        return function (a) {\n            var b = func.call(this, a);\n            return b + this.lang().ordinal(b);\n        };\n    }\n\n    while (ordinalizeTokens.length) {\n        i = ordinalizeTokens.pop();\n        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i]);\n    }\n    while (paddedTokens.length) {\n        i = paddedTokens.pop();\n        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);\n    }\n    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n\n    // Moment prototype object\n    function Moment(date, isUTC, lang) {\n        this._d = date;\n        this._isUTC = !!isUTC;\n        this._a = date._a || null;\n        this._lang = lang || false;\n    }\n\n    // Duration Constructor\n    function Duration(duration) {\n        var data = this._data = {},\n            years = duration.years || duration.y || 0,\n            months = duration.months || duration.M || 0,\n            weeks = duration.weeks || duration.w || 0,\n            days = duration.days || duration.d || 0,\n            hours = duration.hours || duration.h || 0,\n            minutes = duration.minutes || duration.m || 0,\n            seconds = duration.seconds || duration.s || 0,\n            milliseconds = duration.milliseconds || duration.ms || 0;\n\n        // representation for dateAddRemove\n        this._milliseconds = milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 36e5; // 1000 * 60 * 60\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = months +\n            years * 12;\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n        seconds += absRound(milliseconds / 1000);\n\n        data.seconds = seconds % 60;\n        minutes += absRound(seconds / 60);\n\n        data.minutes = minutes % 60;\n        hours += absRound(minutes / 60);\n\n        data.hours = hours % 24;\n        days += absRound(hours / 24);\n\n        days += weeks * 7;\n        data.days = days % 30;\n\n        months += absRound(days / 30);\n\n        data.months = months % 12;\n        years += absRound(months / 12);\n\n        data.years = years;\n\n        this._lang = false;\n    }\n\n\n    /************************************\n        Helpers\n    ************************************/\n\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.ceil(number);\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    // left zero fill a number\n    // see http://jsperf.com/left-zero-filling for performance comparison\n    function leftZeroFill(number, targetLength) {\n        var output = number + '';\n        while (output.length < targetLength) {\n            output = '0' + output;\n        }\n        return output;\n    }\n\n    // helper function for _.addTime and _.subtractTime\n    function addOrSubtractDurationFromMoment(mom, duration, isAdding) {\n        var ms = duration._milliseconds,\n            d = duration._days,\n            M = duration._months,\n            currentDate;\n\n        if (ms) {\n            mom._d.setTime(+mom + ms * isAdding);\n        }\n        if (d) {\n            mom.date(mom.date() + d * isAdding);\n        }\n        if (M) {\n            currentDate = mom.date();\n            mom.date(1)\n                .month(mom.month() + M * isAdding)\n                .date(Math.min(currentDate, mom.daysInMonth()));\n        }\n    }\n\n    // check if is an array\n    function isArray(input) {\n        return Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if (~~array1[i] !== ~~array2[i]) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function dateFromArray(input, asUTC, hoursOffset, minutesOffset) {\n        var i, date, forValid = [];\n        for (i = 0; i < 7; i++) {\n            forValid[i] = input[i] = (input[i] == null) ? (i === 2 ? 1 : 0) : input[i];\n        }\n        // we store whether we used utc or not in the input array\n        input[7] = forValid[7] = asUTC;\n        // if the parser flagged the input as invalid, we pass the value along\n        if (input[8] != null) {\n            forValid[8] = input[8];\n        }\n        // add the offsets to the time to be parsed so that we can have a clean array\n        // for checking isValid\n        input[3] += hoursOffset || 0;\n        input[4] += minutesOffset || 0;\n        date = new Date(0);\n        if (asUTC) {\n            date.setUTCFullYear(input[0], input[1], input[2]);\n            date.setUTCHours(input[3], input[4], input[5], input[6]);\n        } else {\n            date.setFullYear(input[0], input[1], input[2]);\n            date.setHours(input[3], input[4], input[5], input[6]);\n        }\n        date._a = forValid;\n        return date;\n    }\n\n    // Loads a language definition into the `languages` cache.  The function\n    // takes a key and optionally values.  If not in the browser and no values\n    // are provided, it will load the language file module.  As a convenience,\n    // this function also returns the language values.\n    function loadLang(key, values) {\n        var i, m,\n            parse = [];\n\n        if (!values && hasModule) {\n            values = require('./lang/' + key);\n        }\n\n        for (i = 0; i < langConfigProperties.length; i++) {\n            // If a language definition does not provide a value, inherit\n            // from English\n            values[langConfigProperties[i]] = values[langConfigProperties[i]] ||\n              languages.en[langConfigProperties[i]];\n        }\n\n        for (i = 0; i < 12; i++) {\n            m = moment([2000, i]);\n            parse[i] = new RegExp('^' + (values.months[i] || values.months(m, '')) +\n                '|^' + (values.monthsShort[i] || values.monthsShort(m, '')).replace('.', ''), 'i');\n        }\n        values.monthsParse = values.monthsParse || parse;\n\n        languages[key] = values;\n\n        return values;\n    }\n\n    // Determines which language definition to use and returns it.\n    //\n    // With no parameters, it will return the global language.  If you\n    // pass in a language key, such as 'en', it will return the\n    // definition for 'en', so long as 'en' has already been loaded using\n    // moment.lang.  If you pass in a moment or duration instance, it\n    // will decide the language based on that, or default to the global\n    // language.\n    function getLangDefinition(m) {\n        var langKey = (typeof m === 'string') && m ||\n                      m && m._lang ||\n                      null;\n\n        return langKey ? (languages[langKey] || loadLang(langKey)) : moment;\n    }\n\n\n    /************************************\n        Formatting\n    ************************************/\n\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[.*\\]/)) {\n            return input.replace(/^\\[|\\]$/g, \"\");\n        }\n        return input.replace(/\\\\/g, \"\");\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = \"\";\n            for (i = 0; i < length; i++) {\n                output += typeof array[i].call === 'function' ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return m.lang().longDateFormat[input] || input;\n        }\n\n        while (i-- && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n        }\n\n        if (!formatFunctions[format]) {\n            formatFunctions[format] = makeFormatFunction(format);\n        }\n\n        return formatFunctions[format](m);\n    }\n\n\n    /************************************\n        Parsing\n    ************************************/\n\n\n    // get the regex to find the next token\n    function getParseRegexForToken(token) {\n        switch (token) {\n        case 'DDDD':\n            return parseTokenThreeDigits;\n        case 'YYYY':\n            return parseTokenFourDigits;\n        case 'S':\n        case 'SS':\n        case 'SSS':\n        case 'DDD':\n            return parseTokenOneToThreeDigits;\n        case 'MMM':\n        case 'MMMM':\n        case 'dd':\n        case 'ddd':\n        case 'dddd':\n        case 'a':\n        case 'A':\n            return parseTokenWord;\n        case 'Z':\n        case 'ZZ':\n            return parseTokenTimezone;\n        case 'T':\n            return parseTokenT;\n        case 'MM':\n        case 'DD':\n        case 'YY':\n        case 'HH':\n        case 'hh':\n        case 'mm':\n        case 'ss':\n        case 'M':\n        case 'D':\n        case 'd':\n        case 'H':\n        case 'h':\n        case 'm':\n        case 's':\n            return parseTokenOneOrTwoDigits;\n        default :\n            return new RegExp(token.replace('\\\\', ''));\n        }\n    }\n\n    // function to convert string input to date\n    function addTimeToArrayFromToken(token, input, datePartArray, config) {\n        var a, b;\n\n        switch (token) {\n        // MONTH\n        case 'M' : // fall through to MM\n        case 'MM' :\n            datePartArray[1] = (input == null) ? 0 : ~~input - 1;\n            break;\n        case 'MMM' : // fall through to MMMM\n        case 'MMMM' :\n            for (a = 0; a < 12; a++) {\n                if (getLangDefinition().monthsParse[a].test(input)) {\n                    datePartArray[1] = a;\n                    b = true;\n                    break;\n                }\n            }\n            // if we didn't find a month name, mark the date as invalid.\n            if (!b) {\n                datePartArray[8] = false;\n            }\n            break;\n        // DAY OF MONTH\n        case 'D' : // fall through to DDDD\n        case 'DD' : // fall through to DDDD\n        case 'DDD' : // fall through to DDDD\n        case 'DDDD' :\n            if (input != null) {\n                datePartArray[2] = ~~input;\n            }\n            break;\n        // YEAR\n        case 'YY' :\n            datePartArray[0] = ~~input + (~~input > 70 ? 1900 : 2000);\n            break;\n        case 'YYYY' :\n            datePartArray[0] = ~~Math.abs(input);\n            break;\n        // AM / PM\n        case 'a' : // fall through to A\n        case 'A' :\n            config.isPm = ((input + '').toLowerCase() === 'pm');\n            break;\n        // 24 HOUR\n        case 'H' : // fall through to hh\n        case 'HH' : // fall through to hh\n        case 'h' : // fall through to hh\n        case 'hh' :\n            datePartArray[3] = ~~input;\n            break;\n        // MINUTE\n        case 'm' : // fall through to mm\n        case 'mm' :\n            datePartArray[4] = ~~input;\n            break;\n        // SECOND\n        case 's' : // fall through to ss\n        case 'ss' :\n            datePartArray[5] = ~~input;\n            break;\n        // MILLISECOND\n        case 'S' :\n        case 'SS' :\n        case 'SSS' :\n            datePartArray[6] = ~~ (('0.' + input) * 1000);\n            break;\n        // TIMEZONE\n        case 'Z' : // fall through to ZZ\n        case 'ZZ' :\n            config.isUTC = true;\n            a = (input + '').match(parseTimezoneChunker);\n            if (a && a[1]) {\n                config.tzh = ~~a[1];\n            }\n            if (a && a[2]) {\n                config.tzm = ~~a[2];\n            }\n            // reverse offsets\n            if (a && a[0] === '+') {\n                config.tzh = -config.tzh;\n                config.tzm = -config.tzm;\n            }\n            break;\n        }\n\n        // if the input is null, the date is not valid\n        if (input == null) {\n            datePartArray[8] = false;\n        }\n    }\n\n    // date from string and format string\n    function makeDateFromStringAndFormat(string, format) {\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        // We store some additional data on the array for validation\n        // datePartArray[7] is true if the Date was created with `Date.UTC` and false if created with `new Date`\n        // datePartArray[8] is false if the Date is invalid, and undefined if the validity is unknown.\n        var datePartArray = [0, 0, 1, 0, 0, 0, 0],\n            config = {\n                tzh : 0, // timezone hour offset\n                tzm : 0  // timezone minute offset\n            },\n            tokens = format.match(formattingTokens),\n            i, parsedInput;\n\n        for (i = 0; i < tokens.length; i++) {\n            parsedInput = (getParseRegexForToken(tokens[i]).exec(string) || [])[0];\n            if (parsedInput) {\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n            }\n            // don't parse if its not a known token\n            if (formatTokenFunctions[tokens[i]]) {\n                addTimeToArrayFromToken(tokens[i], parsedInput, datePartArray, config);\n            }\n        }\n        // handle am pm\n        if (config.isPm && datePartArray[3] < 12) {\n            datePartArray[3] += 12;\n        }\n        // if is 12 am, change hours to 0\n        if (config.isPm === false && datePartArray[3] === 12) {\n            datePartArray[3] = 0;\n        }\n        // return\n        return dateFromArray(datePartArray, config.isUTC, config.tzh, config.tzm);\n    }\n\n    // date from string and array of format strings\n    function makeDateFromStringAndArray(string, formats) {\n        var output,\n            inputParts = string.match(parseMultipleFormatChunker) || [],\n            formattedInputParts,\n            scoreToBeat = 99,\n            i,\n            currentDate,\n            currentScore;\n        for (i = 0; i < formats.length; i++) {\n            currentDate = makeDateFromStringAndFormat(string, formats[i]);\n            formattedInputParts = formatMoment(new Moment(currentDate), formats[i]).match(parseMultipleFormatChunker) || [];\n            currentScore = compareArrays(inputParts, formattedInputParts);\n            if (currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                output = currentDate;\n            }\n        }\n        return output;\n    }\n\n    // date from iso format\n    function makeDateFromString(string) {\n        var format = 'YYYY-MM-DDT',\n            i;\n        if (isoRegex.exec(string)) {\n            for (i = 0; i < 4; i++) {\n                if (isoTimes[i][1].exec(string)) {\n                    format += isoTimes[i][0];\n                    break;\n                }\n            }\n            return parseTokenTimezone.exec(string) ?\n                makeDateFromStringAndFormat(string, format + ' Z') :\n                makeDateFromStringAndFormat(string, format);\n        }\n        return new Date(string);\n    }\n\n\n    /************************************\n        Relative Time\n    ************************************/\n\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {\n        var rt = lang.relativeTime[string];\n        return (typeof rt === 'function') ?\n            rt(number || 1, !!withoutSuffix, string, isFuture) :\n            rt.replace(/%d/i, number || 1);\n    }\n\n    function relativeTime(milliseconds, withoutSuffix, lang) {\n        var seconds = round(Math.abs(milliseconds) / 1000),\n            minutes = round(seconds / 60),\n            hours = round(minutes / 60),\n            days = round(hours / 24),\n            years = round(days / 365),\n            args = seconds < 45 && ['s', seconds] ||\n                minutes === 1 && ['m'] ||\n                minutes < 45 && ['mm', minutes] ||\n                hours === 1 && ['h'] ||\n                hours < 22 && ['hh', hours] ||\n                days === 1 && ['d'] ||\n                days <= 25 && ['dd', days] ||\n                days <= 45 && ['M'] ||\n                days < 345 && ['MM', round(days / 30)] ||\n                years === 1 && ['y'] || ['yy', years];\n        args[2] = withoutSuffix;\n        args[3] = milliseconds > 0;\n        args[4] = lang;\n        return substituteTimeAgo.apply({}, args);\n    }\n\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n\n    moment = function (input, format) {\n        if (input === null || input === '') {\n            return null;\n        }\n        var date,\n            matched;\n        // parse Moment object\n        if (moment.isMoment(input)) {\n            return new Moment(new Date(+input._d), input._isUTC, input._lang);\n        // parse string and format\n        } else if (format) {\n            if (isArray(format)) {\n                date = makeDateFromStringAndArray(input, format);\n            } else {\n                date = makeDateFromStringAndFormat(input, format);\n            }\n        // evaluate it as a JSON-encoded date\n        } else {\n            matched = aspNetJsonRegex.exec(input);\n            date = input === undefined ? new Date() :\n                matched ? new Date(+matched[1]) :\n                input instanceof Date ? input :\n                isArray(input) ? dateFromArray(input) :\n                typeof input === 'string' ? makeDateFromString(input) :\n                new Date(input);\n        }\n\n        return new Moment(date);\n    };\n\n    // creating with utc\n    moment.utc = function (input, format) {\n        if (isArray(input)) {\n            return new Moment(dateFromArray(input, true), true);\n        }\n        // if we don't have a timezone, we need to add one to trigger parsing into utc\n        if (typeof input === 'string' && !parseTokenTimezone.exec(input)) {\n            input += ' +0000';\n            if (format) {\n                format += ' Z';\n            }\n        }\n        return moment(input, format).utc();\n    };\n\n    // creating with unix timestamp (in seconds)\n    moment.unix = function (input) {\n        return moment(input * 1000);\n    };\n\n    // duration\n    moment.duration = function (input, key) {\n        var isDuration = moment.isDuration(input),\n            isNumber = (typeof input === 'number'),\n            duration = (isDuration ? input._data : (isNumber ? {} : input)),\n            ret;\n\n        if (isNumber) {\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration) {\n            ret._lang = input._lang;\n        }\n\n        return ret;\n    };\n\n    // humanizeDuration\n    // This method is deprecated in favor of the new Duration object.  Please\n    // see the moment.duration method.\n    moment.humanizeDuration = function (num, type, withSuffix) {\n        return moment.duration(num, type === true ? null : type).humanize(type === true ? true : withSuffix);\n    };\n\n    // version number\n    moment.version = VERSION;\n\n    // default format\n    moment.defaultFormat = isoFormat;\n\n    // This function will load languages and then set the global language.  If\n    // no arguments are passed in, it will simply return the current global\n    // language key.\n    moment.lang = function (key, values) {\n        var i;\n\n        if (!key) {\n            return currentLanguage;\n        }\n        if (values || !languages[key]) {\n            loadLang(key, values);\n        }\n        if (languages[key]) {\n            // deprecated, to get the language definition variables, use the\n            // moment.fn.lang method or the getLangDefinition function.\n            for (i = 0; i < langConfigProperties.length; i++) {\n                moment[langConfigProperties[i]] = languages[key][langConfigProperties[i]];\n            }\n            moment.monthsParse = languages[key].monthsParse;\n            currentLanguage = key;\n        }\n    };\n\n    // returns language data\n    moment.langData = getLangDefinition;\n\n    // compare moment object\n    moment.isMoment = function (obj) {\n        return obj instanceof Moment;\n    };\n\n    // for typechecking Duration objects\n    moment.isDuration = function (obj) {\n        return obj instanceof Duration;\n    };\n\n    // Set default language, other languages will inherit from English.\n    moment.lang('en', {\n        months : \"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),\n        monthsShort : \"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),\n        weekdays : \"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),\n        weekdaysShort : \"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),\n        weekdaysMin : \"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),\n        longDateFormat : {\n            LT : \"h:mm A\",\n            L : \"MM/DD/YYYY\",\n            LL : \"MMMM D YYYY\",\n            LLL : \"MMMM D YYYY LT\",\n            LLLL : \"dddd, MMMM D YYYY LT\"\n        },\n        meridiem : function (hours, minutes, isLower) {\n            if (hours > 11) {\n                return isLower ? 'pm' : 'PM';\n            } else {\n                return isLower ? 'am' : 'AM';\n            }\n        },\n        calendar : {\n            sameDay : '[Today at] LT',\n            nextDay : '[Tomorrow at] LT',\n            nextWeek : 'dddd [at] LT',\n            lastDay : '[Yesterday at] LT',\n            lastWeek : '[last] dddd [at] LT',\n            sameElse : 'L'\n        },\n        relativeTime : {\n            future : \"in %s\",\n            past : \"%s ago\",\n            s : \"a few seconds\",\n            m : \"a minute\",\n            mm : \"%d minutes\",\n            h : \"an hour\",\n            hh : \"%d hours\",\n            d : \"a day\",\n            dd : \"%d days\",\n            M : \"a month\",\n            MM : \"%d months\",\n            y : \"a year\",\n            yy : \"%d years\"\n        },\n        ordinal : function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        }\n    });\n\n\n    /************************************\n        Moment Prototype\n    ************************************/\n\n\n    moment.fn = Moment.prototype = {\n\n        clone : function () {\n            return moment(this);\n        },\n\n        valueOf : function () {\n            return +this._d;\n        },\n\n        unix : function () {\n            return Math.floor(+this._d / 1000);\n        },\n\n        toString : function () {\n            return this._d.toString();\n        },\n\n        toDate : function () {\n            return this._d;\n        },\n\n        toArray : function () {\n            var m = this;\n            return [\n                m.year(),\n                m.month(),\n                m.date(),\n                m.hours(),\n                m.minutes(),\n                m.seconds(),\n                m.milliseconds(),\n                !!this._isUTC\n            ];\n        },\n\n        isValid : function () {\n            if (this._a) {\n                // if the parser finds that the input is invalid, it sets\n                // the eighth item in the input array to false.\n                if (this._a[8] != null) {\n                    return !!this._a[8];\n                }\n                return !compareArrays(this._a, (this._a[7] ? moment.utc(this._a) : moment(this._a)).toArray());\n            }\n            return !isNaN(this._d.getTime());\n        },\n\n        utc : function () {\n            this._isUTC = true;\n            return this;\n        },\n\n        local : function () {\n            this._isUTC = false;\n            return this;\n        },\n\n        format : function (inputString) {\n            return formatMoment(this, inputString ? inputString : moment.defaultFormat);\n        },\n\n        add : function (input, val) {\n            var dur = val ? moment.duration(+val, input) : moment.duration(input);\n            addOrSubtractDurationFromMoment(this, dur, 1);\n            return this;\n        },\n\n        subtract : function (input, val) {\n            var dur = val ? moment.duration(+val, input) : moment.duration(input);\n            addOrSubtractDurationFromMoment(this, dur, -1);\n            return this;\n        },\n\n        diff : function (input, val, asFloat) {\n            var inputMoment = this._isUTC ? moment(input).utc() : moment(input).local(),\n                zoneDiff = (this.zone() - inputMoment.zone()) * 6e4,\n                diff = this._d - inputMoment._d - zoneDiff,\n                year = this.year() - inputMoment.year(),\n                month = this.month() - inputMoment.month(),\n                date = this.date() - inputMoment.date(),\n                output;\n            if (val === 'months') {\n                output = year * 12 + month + date / 30;\n            } else if (val === 'years') {\n                output = year + (month + date / 30) / 12;\n            } else {\n                output = val === 'seconds' ? diff / 1e3 : // 1000\n                    val === 'minutes' ? diff / 6e4 : // 1000 * 60\n                    val === 'hours' ? diff / 36e5 : // 1000 * 60 * 60\n                    val === 'days' ? diff / 864e5 : // 1000 * 60 * 60 * 24\n                    val === 'weeks' ? diff / 6048e5 : // 1000 * 60 * 60 * 24 * 7\n                    diff;\n            }\n            return asFloat ? output : round(output);\n        },\n\n        from : function (time, withoutSuffix) {\n            return moment.duration(this.diff(time)).lang(this._lang).humanize(!withoutSuffix);\n        },\n\n        fromNow : function (withoutSuffix) {\n            return this.from(moment(), withoutSuffix);\n        },\n\n        calendar : function () {\n            var diff = this.diff(moment().sod(), 'days', true),\n                calendar = this.lang().calendar,\n                allElse = calendar.sameElse,\n                format = diff < -6 ? allElse :\n                diff < -1 ? calendar.lastWeek :\n                diff < 0 ? calendar.lastDay :\n                diff < 1 ? calendar.sameDay :\n                diff < 2 ? calendar.nextDay :\n                diff < 7 ? calendar.nextWeek : allElse;\n            return this.format(typeof format === 'function' ? format.apply(this) : format);\n        },\n\n        isLeapYear : function () {\n            var year = this.year();\n            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n        },\n\n        isDST : function () {\n            return (this.zone() < moment([this.year()]).zone() ||\n                this.zone() < moment([this.year(), 5]).zone());\n        },\n\n        day : function (input) {\n            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n            return input == null ? day :\n                this.add({ d : input - day });\n        },\n\n        startOf: function (val) {\n            // the following switch intentionally omits break keywords\n            // to utilize falling through the cases.\n            switch (val.replace(/s$/, '')) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'day':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n                /* falls through */\n            }\n            return this;\n        },\n\n        endOf: function (val) {\n            return this.startOf(val).add(val.replace(/s?$/, 's'), 1).subtract('ms', 1);\n        },\n\n        sod: function () {\n            return this.clone().startOf('day');\n        },\n\n        eod: function () {\n            // end of day = start of day plus 1 day, minus 1 millisecond\n            return this.clone().endOf('day');\n        },\n\n        zone : function () {\n            return this._isUTC ? 0 : this._d.getTimezoneOffset();\n        },\n\n        daysInMonth : function () {\n            return moment.utc([this.year(), this.month() + 1, 0]).date();\n        },\n\n        // If passed a language key, it will set the language for this\n        // instance.  Otherwise, it will return the language configuration\n        // variables for this instance.\n        lang : function (lang) {\n            if (lang === undefined) {\n                return getLangDefinition(this);\n            } else {\n                this._lang = lang;\n                return this;\n            }\n        }\n    };\n\n    // helper for adding shortcuts\n    function makeGetterAndSetter(name, key) {\n        moment.fn[name] = function (input) {\n            var utc = this._isUTC ? 'UTC' : '';\n            if (input != null) {\n                this._d['set' + utc + key](input);\n                return this;\n            } else {\n                return this._d['get' + utc + key]();\n            }\n        };\n    }\n\n    // loop through and add shortcuts (Month, Date, Hours, Minutes, Seconds, Milliseconds)\n    for (i = 0; i < proxyGettersAndSetters.length; i ++) {\n        makeGetterAndSetter(proxyGettersAndSetters[i].toLowerCase(), proxyGettersAndSetters[i]);\n    }\n\n    // add shortcut for year (uses different syntax than the getter/setter 'year' == 'FullYear')\n    makeGetterAndSetter('year', 'FullYear');\n\n\n    /************************************\n        Duration Prototype\n    ************************************/\n\n\n    moment.duration.fn = Duration.prototype = {\n        weeks : function () {\n            return absRound(this.days() / 7);\n        },\n\n        valueOf : function () {\n            return this._milliseconds +\n              this._days * 864e5 +\n              this._months * 2592e6;\n        },\n\n        humanize : function (withSuffix) {\n            var difference = +this,\n                rel = this.lang().relativeTime,\n                output = relativeTime(difference, !withSuffix, this.lang()),\n                fromNow = difference <= 0 ? rel.past : rel.future;\n\n            if (withSuffix) {\n                if (typeof fromNow === 'function') {\n                    output = fromNow(output);\n                } else {\n                    output = fromNow.replace(/%s/i, output);\n                }\n            }\n\n            return output;\n        },\n\n        lang : moment.fn.lang\n    };\n\n    function makeDurationGetter(name) {\n        moment.duration.fn[name] = function () {\n            return this._data[name];\n        };\n    }\n\n    function makeDurationAsGetter(name, factor) {\n        moment.duration.fn['as' + name] = function () {\n            return +this / factor;\n        };\n    }\n\n    for (i in unitMillisecondFactors) {\n        if (unitMillisecondFactors.hasOwnProperty(i)) {\n            makeDurationAsGetter(i, unitMillisecondFactors[i]);\n            makeDurationGetter(i.toLowerCase());\n        }\n    }\n\n    makeDurationAsGetter('Weeks', 6048e5);\n\n\n    /************************************\n        Exposing Moment\n    ************************************/\n\n\n    // CommonJS module is defined\n    if (hasModule) {\n        module.exports = moment;\n    }\n    /*global ender:false */\n    if (typeof ender === 'undefined') {\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `moment` as a global object via a string identifier,\n        // for Closure Compiler \"advanced\" mode\n        this['moment'] = moment;\n    }\n    /*global define:false */\n    if (typeof define === \"function\" && define.amd) {\n        define(\"moment\", [], function () {\n            return moment;\n        });\n    }\n}).call(this);\n"]],"start1":0,"start2":0,"length1":0,"length2":40293}]],"length":40293}
{"contributors":[],"silentsave":false,"ts":1349702146336,"patch":[[{"diffs":[[1,"// moment.js\n// version : 1.7.2\n// author : Tim Wood\n// license : MIT\n// momentjs.com\n\n(function (undefined) {\n\n    /************************************\n        Constants\n    ************************************/\n\n    var moment,\n        VERSION = \"1.7.2\",\n        round = Math.round, i,\n        // internal storage for language config files\n        languages = {},\n        currentLanguage = 'en',\n\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports),\n\n        // Parameters to check for on the lang config.  This list of properties\n        // will be inherited from English if not provided in a language\n        // definition.  monthsParse is also a lang config property, but it\n        // cannot be inherited and as such cannot be enumerated here.\n        langConfigProperties = 'months|monthsShort|weekdays|weekdaysShort|weekdaysMin|longDateFormat|calendar|relativeTime|ordinal|meridiem'.split('|'),\n\n        // ASP.NET json date format regex\n        aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i,\n\n        // format tokens\n        formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|SS?S?|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LT|LL?L?L?)/g,\n\n        // parsing tokens\n        parseMultipleFormatChunker = /([0-9a-zA-Z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)/gi,\n\n        // parsing token regexes\n        parseTokenOneOrTwoDigits = /\\d\\d?/, // 0 - 99\n        parseTokenOneToThreeDigits = /\\d{1,3}/, // 0 - 999\n        parseTokenThreeDigits = /\\d{3}/, // 000 - 999\n        parseTokenFourDigits = /\\d{1,4}/, // 0 - 9999\n        parseTokenWord = /[0-9a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+/i, // any word characters or numbers\n        parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i, // +00:00 -00:00 +0000 -0000 or Z\n        parseTokenT = /T/i, // T (ISO seperator)\n\n        // preliminary iso regex\n        // 0000-00-00 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000\n        isoRegex = /^\\s*\\d{4}-\\d\\d-\\d\\d(T(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d\\d?\\d?)?)?)?)?([\\+\\-]\\d\\d:?\\d\\d)?)?/,\n        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',\n\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.S', /(T?)\\d\\d:\\d\\d:\\d\\d\\.\\d{1,3}/],\n            ['HH:mm:ss', /(T?)\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /(T?)\\d\\d:\\d\\d/],\n            ['HH', /(T?)\\d\\d/]\n        ],\n\n        // timezone chunker \"+10:00\" > [\"10\", \"00\"] or \"-1530\" > [\"-15\", \"30\"]\n        parseTimezoneChunker = /([\\+\\-]|\\d\\d)/gi,\n\n        // getter and setter names\n        proxyGettersAndSetters = 'Month|Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),\n        unitMillisecondFactors = {\n            'Milliseconds' : 1,\n            'Seconds' : 1e3,\n            'Minutes' : 6e4,\n            'Hours' : 36e5,\n            'Days' : 864e5,\n            'Months' : 2592e6,\n            'Years' : 31536e6\n        },\n\n        // format function strings\n        formatFunctions = {},\n\n        // tokens to ordinalize and pad\n        ordinalizeTokens = 'DDD w M D d'.split(' '),\n        paddedTokens = 'M D H h m s w'.split(' '),\n\n        /*\n         * moment.fn.format uses new Function() to create an inlined formatting function.\n         * Results are a 3x speed boost\n         * http://jsperf.com/momentjs-cached-format-functions\n         *\n         * These strings are appended into a function using replaceFormatTokens and makeFormatFunction\n         */\n        formatTokenFunctions = {\n            // a = placeholder\n            // b = placeholder\n            // t = the current moment being formatted\n            // v = getValueAtKey function\n            // o = language.ordinal function\n            // p = leftZeroFill function\n            // m = language.meridiem value or function\n            M    : function () {\n                return this.month() + 1;\n            },\n            MMM  : function (format) {\n                return getValueFromArray(\"monthsShort\", this.month(), this, format);\n            },\n            MMMM : function (format) {\n                return getValueFromArray(\"months\", this.month(), this, format);\n            },\n            D    : function () {\n                return this.date();\n            },\n            DDD  : function () {\n                var a = new Date(this.year(), this.month(), this.date()),\n                    b = new Date(this.year(), 0, 1);\n                return ~~(((a - b) / 864e5) + 1.5);\n            },\n            d    : function () {\n                return this.day();\n            },\n            dd   : function (format) {\n                return getValueFromArray(\"weekdaysMin\", this.day(), this, format);\n            },\n            ddd  : function (format) {\n                return getValueFromArray(\"weekdaysShort\", this.day(), this, format);\n            },\n            dddd : function (format) {\n                return getValueFromArray(\"weekdays\", this.day(), this, format);\n            },\n            w    : function () {\n                var a = new Date(this.year(), this.month(), this.date() - this.day() + 5),\n                    b = new Date(a.getFullYear(), 0, 4);\n                return ~~((a - b) / 864e5 / 7 + 1.5);\n            },\n            YY   : function () {\n                return leftZeroFill(this.year() % 100, 2);\n            },\n            YYYY : function () {\n                return leftZeroFill(this.year(), 4);\n            },\n            a    : function () {\n                return this.lang().meridiem(this.hours(), this.minutes(), true);\n            },\n            A    : function () {\n                return this.lang().meridiem(this.hours(), this.minutes(), false);\n            },\n            H    : function () {\n                return this.hours();\n            },\n            h    : function () {\n                return this.hours() % 12 || 12;\n            },\n            m    : function () {\n                return this.minutes();\n            },\n            s    : function () {\n                return this.seconds();\n            },\n            S    : function () {\n                return ~~(this.milliseconds() / 100);\n            },\n            SS   : function () {\n                return leftZeroFill(~~(this.milliseconds() / 10), 2);\n            },\n            SSS  : function () {\n                return leftZeroFill(this.milliseconds(), 3);\n            },\n            Z    : function () {\n                var a = -this.zone(),\n                    b = \"+\";\n                if (a < 0) {\n                    a = -a;\n                    b = \"-\";\n                }\n                return b + leftZeroFill(~~(a / 60), 2) + \":\" + leftZeroFill(~~a % 60, 2);\n            },\n            ZZ   : function () {\n                var a = -this.zone(),\n                    b = \"+\";\n                if (a < 0) {\n                    a = -a;\n                    b = \"-\";\n                }\n                return b + leftZeroFill(~~(10 * a / 6), 4);\n            }\n        };\n\n    function getValueFromArray(key, index, m, format) {\n        var lang = m.lang();\n        return lang[key].call ? lang[key](m, format) : lang[key][index];\n    }\n\n    function padToken(func, count) {\n        return function (a) {\n            return leftZeroFill(func.call(this, a), count);\n        };\n    }\n    function ordinalizeToken(func) {\n        return function (a) {\n            var b = func.call(this, a);\n            return b + this.lang().ordinal(b);\n        };\n    }\n\n    while (ordinalizeTokens.length) {\n        i = ordinalizeTokens.pop();\n        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i]);\n    }\n    while (paddedTokens.length) {\n        i = paddedTokens.pop();\n        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);\n    }\n    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n\n    // Moment prototype object\n    function Moment(date, isUTC, lang) {\n        this._d = date;\n        this._isUTC = !!isUTC;\n        this._a = date._a || null;\n        this._lang = lang || false;\n    }\n\n    // Duration Constructor\n    function Duration(duration) {\n        var data = this._data = {},\n            years = duration.years || duration.y || 0,\n            months = duration.months || duration.M || 0,\n            weeks = duration.weeks || duration.w || 0,\n            days = duration.days || duration.d || 0,\n            hours = duration.hours || duration.h || 0,\n            minutes = duration.minutes || duration.m || 0,\n            seconds = duration.seconds || duration.s || 0,\n            milliseconds = duration.milliseconds || duration.ms || 0;\n\n        // representation for dateAddRemove\n        this._milliseconds = milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 36e5; // 1000 * 60 * 60\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = months +\n            years * 12;\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n        seconds += absRound(milliseconds / 1000);\n\n        data.seconds = seconds % 60;\n        minutes += absRound(seconds / 60);\n\n        data.minutes = minutes % 60;\n        hours += absRound(minutes / 60);\n\n        data.hours = hours % 24;\n        days += absRound(hours / 24);\n\n        days += weeks * 7;\n        data.days = days % 30;\n\n        months += absRound(days / 30);\n\n        data.months = months % 12;\n        years += absRound(months / 12);\n\n        data.years = years;\n\n        this._lang = false;\n    }\n\n\n    /************************************\n        Helpers\n    ************************************/\n\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.ceil(number);\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    // left zero fill a number\n    // see http://jsperf.com/left-zero-filling for performance comparison\n    function leftZeroFill(number, targetLength) {\n        var output = number + '';\n        while (output.length < targetLength) {\n            output = '0' + output;\n        }\n        return output;\n    }\n\n    // helper function for _.addTime and _.subtractTime\n    function addOrSubtractDurationFromMoment(mom, duration, isAdding) {\n        var ms = duration._milliseconds,\n            d = duration._days,\n            M = duration._months,\n            currentDate;\n\n        if (ms) {\n            mom._d.setTime(+mom + ms * isAdding);\n        }\n        if (d) {\n            mom.date(mom.date() + d * isAdding);\n        }\n        if (M) {\n            currentDate = mom.date();\n            mom.date(1)\n                .month(mom.month() + M * isAdding)\n                .date(Math.min(currentDate, mom.daysInMonth()));\n        }\n    }\n\n    // check if is an array\n    function isArray(input) {\n        return Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if (~~array1[i] !== ~~array2[i]) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function dateFromArray(input, asUTC, hoursOffset, minutesOffset) {\n        var i, date, forValid = [];\n        for (i = 0; i < 7; i++) {\n            forValid[i] = input[i] = (input[i] == null) ? (i === 2 ? 1 : 0) : input[i];\n        }\n        // we store whether we used utc or not in the input array\n        input[7] = forValid[7] = asUTC;\n        // if the parser flagged the input as invalid, we pass the value along\n        if (input[8] != null) {\n            forValid[8] = input[8];\n        }\n        // add the offsets to the time to be parsed so that we can have a clean array\n        // for checking isValid\n        input[3] += hoursOffset || 0;\n        input[4] += minutesOffset || 0;\n        date = new Date(0);\n        if (asUTC) {\n            date.setUTCFullYear(input[0], input[1], input[2]);\n            date.setUTCHours(input[3], input[4], input[5], input[6]);\n        } else {\n            date.setFullYear(input[0], input[1], input[2]);\n            date.setHours(input[3], input[4], input[5], input[6]);\n        }\n        date._a = forValid;\n        return date;\n    }\n\n    // Loads a language definition into the `languages` cache.  The function\n    // takes a key and optionally values.  If not in the browser and no values\n    // are provided, it will load the language file module.  As a convenience,\n    // this function also returns the language values.\n    function loadLang(key, values) {\n        var i, m,\n            parse = [];\n\n        if (!values && hasModule) {\n            values = require('./lang/' + key);\n        }\n\n        for (i = 0; i < langConfigProperties.length; i++) {\n            // If a language definition does not provide a value, inherit\n            // from English\n            values[langConfigProperties[i]] = values[langConfigProperties[i]] ||\n              languages.en[langConfigProperties[i]];\n        }\n\n        for (i = 0; i < 12; i++) {\n            m = moment([2000, i]);\n            parse[i] = new RegExp('^' + (values.months[i] || values.months(m, '')) +\n                '|^' + (values.monthsShort[i] || values.monthsShort(m, '')).replace('.', ''), 'i');\n        }\n        values.monthsParse = values.monthsParse || parse;\n\n        languages[key] = values;\n\n        return values;\n    }\n\n    // Determines which language definition to use and returns it.\n    //\n    // With no parameters, it will return the global language.  If you\n    // pass in a language key, such as 'en', it will return the\n    // definition for 'en', so long as 'en' has already been loaded using\n    // moment.lang.  If you pass in a moment or duration instance, it\n    // will decide the language based on that, or default to the global\n    // language.\n    function getLangDefinition(m) {\n        var langKey = (typeof m === 'string') && m ||\n                      m && m._lang ||\n                      null;\n\n        return langKey ? (languages[langKey] || loadLang(langKey)) : moment;\n    }\n\n\n    /************************************\n        Formatting\n    ************************************/\n\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[.*\\]/)) {\n            return input.replace(/^\\[|\\]$/g, \"\");\n        }\n        return input.replace(/\\\\/g, \"\");\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = \"\";\n            for (i = 0; i < length; i++) {\n                output += typeof array[i].call === 'function' ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return m.lang().longDateFormat[input] || input;\n        }\n\n        while (i-- && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n        }\n\n        if (!formatFunctions[format]) {\n            formatFunctions[format] = makeFormatFunction(format);\n        }\n\n        return formatFunctions[format](m);\n    }\n\n\n    /************************************\n        Parsing\n    ************************************/\n\n\n    // get the regex to find the next token\n    function getParseRegexForToken(token) {\n        switch (token) {\n        case 'DDDD':\n            return parseTokenThreeDigits;\n        case 'YYYY':\n            return parseTokenFourDigits;\n        case 'S':\n        case 'SS':\n        case 'SSS':\n        case 'DDD':\n            return parseTokenOneToThreeDigits;\n        case 'MMM':\n        case 'MMMM':\n        case 'dd':\n        case 'ddd':\n        case 'dddd':\n        case 'a':\n        case 'A':\n            return parseTokenWord;\n        case 'Z':\n        case 'ZZ':\n            return parseTokenTimezone;\n        case 'T':\n            return parseTokenT;\n        case 'MM':\n        case 'DD':\n        case 'YY':\n        case 'HH':\n        case 'hh':\n        case 'mm':\n        case 'ss':\n        case 'M':\n        case 'D':\n        case 'd':\n        case 'H':\n        case 'h':\n        case 'm':\n        case 's':\n            return parseTokenOneOrTwoDigits;\n        default :\n            return new RegExp(token.replace('\\\\', ''));\n        }\n    }\n\n    // function to convert string input to date\n    function addTimeToArrayFromToken(token, input, datePartArray, config) {\n        var a, b;\n\n        switch (token) {\n        // MONTH\n        case 'M' : // fall through to MM\n        case 'MM' :\n            datePartArray[1] = (input == null) ? 0 : ~~input - 1;\n            break;\n        case 'MMM' : // fall through to MMMM\n        case 'MMMM' :\n            for (a = 0; a < 12; a++) {\n                if (getLangDefinition().monthsParse[a].test(input)) {\n                    datePartArray[1] = a;\n                    b = true;\n                    break;\n                }\n            }\n            // if we didn't find a month name, mark the date as invalid.\n            if (!b) {\n                datePartArray[8] = false;\n            }\n            break;\n        // DAY OF MONTH\n        case 'D' : // fall through to DDDD\n        case 'DD' : // fall through to DDDD\n        case 'DDD' : // fall through to DDDD\n        case 'DDDD' :\n            if (input != null) {\n                datePartArray[2] = ~~input;\n            }\n            break;\n        // YEAR\n        case 'YY' :\n            datePartArray[0] = ~~input + (~~input > 70 ? 1900 : 2000);\n            break;\n        case 'YYYY' :\n            datePartArray[0] = ~~Math.abs(input);\n            break;\n        // AM / PM\n        case 'a' : // fall through to A\n        case 'A' :\n            config.isPm = ((input + '').toLowerCase() === 'pm');\n            break;\n        // 24 HOUR\n        case 'H' : // fall through to hh\n        case 'HH' : // fall through to hh\n        case 'h' : // fall through to hh\n        case 'hh' :\n            datePartArray[3] = ~~input;\n            break;\n        // MINUTE\n        case 'm' : // fall through to mm\n        case 'mm' :\n            datePartArray[4] = ~~input;\n            break;\n        // SECOND\n        case 's' : // fall through to ss\n        case 'ss' :\n            datePartArray[5] = ~~input;\n            break;\n        // MILLISECOND\n        case 'S' :\n        case 'SS' :\n        case 'SSS' :\n            datePartArray[6] = ~~ (('0.' + input) * 1000);\n            break;\n        // TIMEZONE\n        case 'Z' : // fall through to ZZ\n        case 'ZZ' :\n            config.isUTC = true;\n            a = (input + '').match(parseTimezoneChunker);\n            if (a && a[1]) {\n                config.tzh = ~~a[1];\n            }\n            if (a && a[2]) {\n                config.tzm = ~~a[2];\n            }\n            // reverse offsets\n            if (a && a[0] === '+') {\n                config.tzh = -config.tzh;\n                config.tzm = -config.tzm;\n            }\n            break;\n        }\n\n        // if the input is null, the date is not valid\n        if (input == null) {\n            datePartArray[8] = false;\n        }\n    }\n\n    // date from string and format string\n    function makeDateFromStringAndFormat(string, format) {\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        // We store some additional data on the array for validation\n        // datePartArray[7] is true if the Date was created with `Date.UTC` and false if created with `new Date`\n        // datePartArray[8] is false if the Date is invalid, and undefined if the validity is unknown.\n        var datePartArray = [0, 0, 1, 0, 0, 0, 0],\n            config = {\n                tzh : 0, // timezone hour offset\n                tzm : 0  // timezone minute offset\n            },\n            tokens = format.match(formattingTokens),\n            i, parsedInput;\n\n        for (i = 0; i < tokens.length; i++) {\n            parsedInput = (getParseRegexForToken(tokens[i]).exec(string) || [])[0];\n            if (parsedInput) {\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n            }\n            // don't parse if its not a known token\n            if (formatTokenFunctions[tokens[i]]) {\n                addTimeToArrayFromToken(tokens[i], parsedInput, datePartArray, config);\n            }\n        }\n        // handle am pm\n        if (config.isPm && datePartArray[3] < 12) {\n            datePartArray[3] += 12;\n        }\n        // if is 12 am, change hours to 0\n        if (config.isPm === false && datePartArray[3] === 12) {\n            datePartArray[3] = 0;\n        }\n        // return\n        return dateFromArray(datePartArray, config.isUTC, config.tzh, config.tzm);\n    }\n\n    // date from string and array of format strings\n    function makeDateFromStringAndArray(string, formats) {\n        var output,\n            inputParts = string.match(parseMultipleFormatChunker) || [],\n            formattedInputParts,\n            scoreToBeat = 99,\n            i,\n            currentDate,\n            currentScore;\n        for (i = 0; i < formats.length; i++) {\n            currentDate = makeDateFromStringAndFormat(string, formats[i]);\n            formattedInputParts = formatMoment(new Moment(currentDate), formats[i]).match(parseMultipleFormatChunker) || [];\n            currentScore = compareArrays(inputParts, formattedInputParts);\n            if (currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                output = currentDate;\n            }\n        }\n        return output;\n    }\n\n    // date from iso format\n    function makeDateFromString(string) {\n        var format = 'YYYY-MM-DDT',\n            i;\n        if (isoRegex.exec(string)) {\n            for (i = 0; i < 4; i++) {\n                if (isoTimes[i][1].exec(string)) {\n                    format += isoTimes[i][0];\n                    break;\n                }\n            }\n            return parseTokenTimezone.exec(string) ?\n                makeDateFromStringAndFormat(string, format + ' Z') :\n                makeDateFromStringAndFormat(string, format);\n        }\n        return new Date(string);\n    }\n\n\n    /************************************\n        Relative Time\n    ************************************/\n\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {\n        var rt = lang.relativeTime[string];\n        return (typeof rt === 'function') ?\n            rt(number || 1, !!withoutSuffix, string, isFuture) :\n            rt.replace(/%d/i, number || 1);\n    }\n\n    function relativeTime(milliseconds, withoutSuffix, lang) {\n        var seconds = round(Math.abs(milliseconds) / 1000),\n            minutes = round(seconds / 60),\n            hours = round(minutes / 60),\n            days = round(hours / 24),\n            years = round(days / 365),\n            args = seconds < 45 && ['s', seconds] ||\n                minutes === 1 && ['m'] ||\n                minutes < 45 && ['mm', minutes] ||\n                hours === 1 && ['h'] ||\n                hours < 22 && ['hh', hours] ||\n                days === 1 && ['d'] ||\n                days <= 25 && ['dd', days] ||\n                days <= 45 && ['M'] ||\n                days < 345 && ['MM', round(days / 30)] ||\n                years === 1 && ['y'] || ['yy', years];\n        args[2] = withoutSuffix;\n        args[3] = milliseconds > 0;\n        args[4] = lang;\n        return substituteTimeAgo.apply({}, args);\n    }\n\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n\n    moment = function (input, format) {\n        if (input === null || input === '') {\n            return null;\n        }\n        var date,\n            matched;\n        // parse Moment object\n        if (moment.isMoment(input)) {\n            return new Moment(new Date(+input._d), input._isUTC, input._lang);\n        // parse string and format\n        } else if (format) {\n            if (isArray(format)) {\n                date = makeDateFromStringAndArray(input, format);\n            } else {\n                date = makeDateFromStringAndFormat(input, format);\n            }\n        // evaluate it as a JSON-encoded date\n        } else {\n            matched = aspNetJsonRegex.exec(input);\n            date = input === undefined ? new Date() :\n                matched ? new Date(+matched[1]) :\n                input instanceof Date ? input :\n                isArray(input) ? dateFromArray(input) :\n                typeof input === 'string' ? makeDateFromString(input) :\n                new Date(input);\n        }\n\n        return new Moment(date);\n    };\n\n    // creating with utc\n    moment.utc = function (input, format) {\n        if (isArray(input)) {\n            return new Moment(dateFromArray(input, true), true);\n        }\n        // if we don't have a timezone, we need to add one to trigger parsing into utc\n        if (typeof input === 'string' && !parseTokenTimezone.exec(input)) {\n            input += ' +0000';\n            if (format) {\n                format += ' Z';\n            }\n        }\n        return moment(input, format).utc();\n    };\n\n    // creating with unix timestamp (in seconds)\n    moment.unix = function (input) {\n        return moment(input * 1000);\n    };\n\n    // duration\n    moment.duration = function (input, key) {\n        var isDuration = moment.isDuration(input),\n            isNumber = (typeof input === 'number'),\n            duration = (isDuration ? input._data : (isNumber ? {} : input)),\n            ret;\n\n        if (isNumber) {\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration) {\n            ret._lang = input._lang;\n        }\n\n        return ret;\n    };\n\n    // humanizeDuration\n    // This method is deprecated in favor of the new Duration object.  Please\n    // see the moment.duration method.\n    moment.humanizeDuration = function (num, type, withSuffix) {\n        return moment.duration(num, type === true ? null : type).humanize(type === true ? true : withSuffix);\n    };\n\n    // version number\n    moment.version = VERSION;\n\n    // default format\n    moment.defaultFormat = isoFormat;\n\n    // This function will load languages and then set the global language.  If\n    // no arguments are passed in, it will simply return the current global\n    // language key.\n    moment.lang = function (key, values) {\n        var i;\n\n        if (!key) {\n            return currentLanguage;\n        }\n        if (values || !languages[key]) {\n            loadLang(key, values);\n        }\n        if (languages[key]) {\n            // deprecated, to get the language definition variables, use the\n            // moment.fn.lang method or the getLangDefinition function.\n            for (i = 0; i < langConfigProperties.length; i++) {\n                moment[langConfigProperties[i]] = languages[key][langConfigProperties[i]];\n            }\n            moment.monthsParse = languages[key].monthsParse;\n            currentLanguage = key;\n        }\n    };\n\n    // returns language data\n    moment.langData = getLangDefinition;\n\n    // compare moment object\n    moment.isMoment = function (obj) {\n        return obj instanceof Moment;\n    };\n\n    // for typechecking Duration objects\n    moment.isDuration = function (obj) {\n        return obj instanceof Duration;\n    };\n\n    // Set default language, other languages will inherit from English.\n    moment.lang('en', {\n        months : \"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),\n        monthsShort : \"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),\n        weekdays : \"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),\n        weekdaysShort : \"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),\n        weekdaysMin : \"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),\n        longDateFormat : {\n            LT : \"h:mm A\",\n            L : \"MM/DD/YYYY\",\n            LL : \"MMMM D YYYY\",\n            LLL : \"MMMM D YYYY LT\",\n            LLLL : \"dddd, MMMM D YYYY LT\"\n        },\n        meridiem : function (hours, minutes, isLower) {\n            if (hours > 11) {\n                return isLower ? 'pm' : 'PM';\n            } else {\n                return isLower ? 'am' : 'AM';\n            }\n        },\n        calendar : {\n            sameDay : '[Today at] LT',\n            nextDay : '[Tomorrow at] LT',\n            nextWeek : 'dddd [at] LT',\n            lastDay : '[Yesterday at] LT',\n            lastWeek : '[last] dddd [at] LT',\n            sameElse : 'L'\n        },\n        relativeTime : {\n            future : \"in %s\",\n            past : \"%s ago\",\n            s : \"a few seconds\",\n            m : \"a minute\",\n            mm : \"%d minutes\",\n            h : \"an hour\",\n            hh : \"%d hours\",\n            d : \"a day\",\n            dd : \"%d days\",\n            M : \"a month\",\n            MM : \"%d months\",\n            y : \"a year\",\n            yy : \"%d years\"\n        },\n        ordinal : function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        }\n    });\n\n\n    /************************************\n        Moment Prototype\n    ************************************/\n\n\n    moment.fn = Moment.prototype = {\n\n        clone : function () {\n            return moment(this);\n        },\n\n        valueOf : function () {\n            return +this._d;\n        },\n\n        unix : function () {\n            return Math.floor(+this._d / 1000);\n        },\n\n        toString : function () {\n            return this._d.toString();\n        },\n\n        toDate : function () {\n            return this._d;\n        },\n\n        toArray : function () {\n            var m = this;\n            return [\n                m.year(),\n                m.month(),\n                m.date(),\n                m.hours(),\n                m.minutes(),\n                m.seconds(),\n                m.milliseconds(),\n                !!this._isUTC\n            ];\n        },\n\n        isValid : function () {\n            if (this._a) {\n                // if the parser finds that the input is invalid, it sets\n                // the eighth item in the input array to false.\n                if (this._a[8] != null) {\n                    return !!this._a[8];\n                }\n                return !compareArrays(this._a, (this._a[7] ? moment.utc(this._a) : moment(this._a)).toArray());\n            }\n            return !isNaN(this._d.getTime());\n        },\n\n        utc : function () {\n            this._isUTC = true;\n            return this;\n        },\n\n        local : function () {\n            this._isUTC = false;\n            return this;\n        },\n\n        format : function (inputString) {\n            return formatMoment(this, inputString ? inputString : moment.defaultFormat);\n        },\n\n        add : function (input, val) {\n            var dur = val ? moment.duration(+val, input) : moment.duration(input);\n            addOrSubtractDurationFromMoment(this, dur, 1);\n            return this;\n        },\n\n        subtract : function (input, val) {\n            var dur = val ? moment.duration(+val, input) : moment.duration(input);\n            addOrSubtractDurationFromMoment(this, dur, -1);\n            return this;\n        },\n\n        diff : function (input, val, asFloat) {\n            var inputMoment = this._isUTC ? moment(input).utc() : moment(input).local(),\n                zoneDiff = (this.zone() - inputMoment.zone()) * 6e4,\n                diff = this._d - inputMoment._d - zoneDiff,\n                year = this.year() - inputMoment.year(),\n                month = this.month() - inputMoment.month(),\n                date = this.date() - inputMoment.date(),\n                output;\n            if (val === 'months') {\n                output = year * 12 + month + date / 30;\n            } else if (val === 'years') {\n                output = year + (month + date / 30) / 12;\n            } else {\n                output = val === 'seconds' ? diff / 1e3 : // 1000\n                    val === 'minutes' ? diff / 6e4 : // 1000 * 60\n                    val === 'hours' ? diff / 36e5 : // 1000 * 60 * 60\n                    val === 'days' ? diff / 864e5 : // 1000 * 60 * 60 * 24\n                    val === 'weeks' ? diff / 6048e5 : // 1000 * 60 * 60 * 24 * 7\n                    diff;\n            }\n            return asFloat ? output : round(output);\n        },\n\n        from : function (time, withoutSuffix) {\n            return moment.duration(this.diff(time)).lang(this._lang).humanize(!withoutSuffix);\n        },\n\n        fromNow : function (withoutSuffix) {\n            return this.from(moment(), withoutSuffix);\n        },\n\n        calendar : function () {\n            var diff = this.diff(moment().sod(), 'days', true),\n                calendar = this.lang().calendar,\n                allElse = calendar.sameElse,\n                format = diff < -6 ? allElse :\n                diff < -1 ? calendar.lastWeek :\n                diff < 0 ? calendar.lastDay :\n                diff < 1 ? calendar.sameDay :\n                diff < 2 ? calendar.nextDay :\n                diff < 7 ? calendar.nextWeek : allElse;\n            return this.format(typeof format === 'function' ? format.apply(this) : format);\n        },\n\n        isLeapYear : function () {\n            var year = this.year();\n            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n        },\n\n        isDST : function () {\n            return (this.zone() < moment([this.year()]).zone() ||\n                this.zone() < moment([this.year(), 5]).zone());\n        },\n\n        day : function (input) {\n            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n            return input == null ? day :\n                this.add({ d : input - day });\n        },\n\n        startOf: function (val) {\n            // the following switch intentionally omits break keywords\n            // to utilize falling through the cases.\n            switch (val.replace(/s$/, '')) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'day':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n                /* falls through */\n            }\n            return this;\n        },\n\n        endOf: function (val) {\n            return this.startOf(val).add(val.replace(/s?$/, 's'), 1).subtract('ms', 1);\n        },\n\n        sod: function () {\n            return this.clone().startOf('day');\n        },\n\n        eod: function () {\n            // end of day = start of day plus 1 day, minus 1 millisecond\n            return this.clone().endOf('day');\n        },\n\n        zone : function () {\n            return this._isUTC ? 0 : this._d.getTimezoneOffset();\n        },\n\n        daysInMonth : function () {\n            return moment.utc([this.year(), this.month() + 1, 0]).date();\n        },\n\n        // If passed a language key, it will set the language for this\n        // instance.  Otherwise, it will return the language configuration\n        // variables for this instance.\n        lang : function (lang) {\n            if (lang === undefined) {\n                return getLangDefinition(this);\n            } else {\n                this._lang = lang;\n                return this;\n            }\n        }\n    };\n\n    // helper for adding shortcuts\n    function makeGetterAndSetter(name, key) {\n        moment.fn[name] = function (input) {\n            var utc = this._isUTC ? 'UTC' : '';\n            if (input != null) {\n                this._d['set' + utc + key](input);\n                return this;\n            } else {\n                return this._d['get' + utc + key]();\n            }\n        };\n    }\n\n    // loop through and add shortcuts (Month, Date, Hours, Minutes, Seconds, Milliseconds)\n    for (i = 0; i < proxyGettersAndSetters.length; i ++) {\n        makeGetterAndSetter(proxyGettersAndSetters[i].toLowerCase(), proxyGettersAndSetters[i]);\n    }\n\n    // add shortcut for year (uses different syntax than the getter/setter 'year' == 'FullYear')\n    makeGetterAndSetter('year', 'FullYear');\n\n\n    /************************************\n        Duration Prototype\n    ************************************/\n\n\n    moment.duration.fn = Duration.prototype = {\n        weeks : function () {\n            return absRound(this.days() / 7);\n        },\n\n        valueOf : function () {\n            return this._milliseconds +\n              this._days * 864e5 +\n              this._months * 2592e6;\n        },\n\n        humanize : function (withSuffix) {\n            var difference = +this,\n                rel = this.lang().relativeTime,\n                output = relativeTime(difference, !withSuffix, this.lang()),\n                fromNow = difference <= 0 ? rel.past : rel.future;\n\n            if (withSuffix) {\n                if (typeof fromNow === 'function') {\n                    output = fromNow(output);\n                } else {\n                    output = fromNow.replace(/%s/i, output);\n                }\n            }\n\n            return output;\n        },\n\n        lang : moment.fn.lang\n    };\n\n    function makeDurationGetter(name) {\n        moment.duration.fn[name] = function () {\n            return this._data[name];\n        };\n    }\n\n    function makeDurationAsGetter(name, factor) {\n        moment.duration.fn['as' + name] = function () {\n            return +this / factor;\n        };\n    }\n\n    for (i in unitMillisecondFactors) {\n        if (unitMillisecondFactors.hasOwnProperty(i)) {\n            makeDurationAsGetter(i, unitMillisecondFactors[i]);\n            makeDurationGetter(i.toLowerCase());\n        }\n    }\n\n    makeDurationAsGetter('Weeks', 6048e5);\n\n\n    /************************************\n        Exposing Moment\n    ************************************/\n\n\n    // CommonJS module is defined\n    if (hasModule) {\n        module.exports = moment;\n    }\n    /*global ender:false */\n    if (typeof ender === 'undefined') {\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `moment` as a global object via a string identifier,\n        // for Closure Compiler \"advanced\" mode\n        this['moment'] = moment;\n    }\n    /*global define:false */\n    if (typeof define === \"function\" && define.amd) {\n        define(\"moment\", [], function () {\n            return moment;\n        });\n    }\n}).call(this);\n"]],"start1":0,"start2":0,"length1":0,"length2":40293}]],"length":40293,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349703619689,"patch":[[{"diffs":[[0,"['HH:mm:ss.S', /"],[-1,"(T?)"],[1,"T"],[0,"\\d\\d:\\d\\d:\\d\\d\\."]],"start1":2240,"start2":2240,"length1":36,"length2":33},{"diffs":[[0,"  ['HH:mm:ss', /"],[-1,"(T?)"],[1,"T"],[0,"\\d\\d:\\d\\d:\\d\\d/]"]],"start1":2294,"start2":2294,"length1":36,"length2":33},{"diffs":[[0,"     ['HH:mm', /"],[-1,"(T?)"],[1,"T"],[0,"\\d\\d:\\d\\d/],\n   "]],"start1":2336,"start2":2336,"length1":36,"length2":33},{"diffs":[[0,"', /"],[-1,"(T?)\\d\\d/]\n        ],\n\n        // timezone chunker \"+10:00\" > [\"10\", \"00\"] or \"-1530\" > [\"-15\", \"30\"]\n        parseTimezoneChunker = /([\\+\\-]|\\d\\d)/gi,\n\n        // getter and setter names\n        proxyGettersAndSetters = 'Month|Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),\n        unitMillisecondFactors = {\n            'Milliseconds' : 1,\n            'Seconds' : 1e3,\n            'Minutes' : 6e4,\n            'Hours' : 36e5,\n            'Days' : 864e5,\n            'Months' : 2592e6,\n            'Years' : 31536e6\n        },\n\n        // format function strings\n        formatFunctions = {},\n\n        // tokens to ordinalize and pad\n        ordinalizeTokens = 'DDD w M D d'.split(' '),\n        paddedTokens = 'M D H h m s w'.split(' '),\n\n        /*\n         * moment.fn.format uses new Function() to create an inlined formatting function.\n         * Results are a 3x speed boost\n         * http://jsperf.com/momentjs-cached-format-functions\n         *\n         * These strings are appended into a function using replaceFormatTokens and makeFormatFunction\n         */\n        formatTokenFunctions = {\n            // a = placeholder\n            // b = placeholder\n            // t = the current moment being formatted\n            // v = getValueAtKey function\n            // o = language.ordinal function\n            // p = leftZeroFill function\n            // m = language.meridiem value or function\n            M    : function () {\n                return this.month() + 1;\n            },\n            MMM  : function (format) {\n                return getValueFromArray(\"monthsShort\", this.month(), this, format);\n            },\n            MMMM : function (format) {\n                return getValueFromArray(\"months\", this.month(), this, format);\n            },\n            D    : function () {\n                return this.date();\n            },\n            DDD  : function () {\n                var a = new Date(this.year(), this.month(), this.date()),\n                    b = new Date(this.year(), 0, 1);\n                return ~~(((a - b) / 864e5) + 1.5);\n            },\n            d    : function () {\n                return this.day();\n            },\n            dd   : function (format) {\n                return getValueFromArray(\"weekdaysMin\", this.day(), this, format);\n            },\n            ddd  : function (format) {\n                return getValueFromArray(\"weekdaysShort\", this.day(), this, format);\n            },\n            dddd : function (format) {\n                return getValueFromArray(\"weekdays\", this.day(), this, format);\n            },\n            w    : function () {\n                var a = new Date(this.year(), this.month(), this.date() - this.day() + 5),\n                    b = new Date(a.getFullYear(), 0, 4);\n                return ~~((a - b) / 864e5 / 7 + 1.5);\n            },\n            YY   : function () {\n                return leftZeroFill(this.year() % 100, 2);\n            },\n            YYYY : function () {\n                return leftZeroFill(this.year(), 4);\n            },\n            a    : function () {\n                return this.lang().meridiem(this.hours(), this.minutes(), true);\n            },\n            A    : function () {\n                return this.lang().meridiem(this.hours(), this.minutes(), false);\n            },\n            H    : function () {\n                return this.hours();\n            },\n            h    : function () {\n                return this.hours() % 12 || 12;\n            },\n            m    : function () {\n                return this.minutes();\n            },\n            s    : function () {\n                return this.seconds();\n            },\n            S    : function () {\n                return ~~(this.milliseconds() / 100);\n            },\n            SS   : function () {\n                return leftZeroFill(~~(this.milliseconds() / 10), 2);\n            },\n            SSS  : function () {\n                return leftZeroFill(this.milliseconds(), 3);\n            },\n            Z    : function () {\n                var a = -this.zone(),\n                    b = \"+\";\n                if (a < 0) {\n                    a = -a;\n                    b = \"-\";\n                }\n                return b + leftZeroFill(~~(a / 60), 2) + \":\" + leftZeroFill(~~a % 60, 2);\n            },\n            ZZ   : function () {\n                var a = -this.zone(),\n                    b = \"+\";\n                if (a < 0) {\n                    a = -a;\n                    b = \"-\";\n                }\n                return b + leftZeroFill(~~(10 * a / 6), 4);\n            }\n        };\n\n    function getValueFromArray(key, index, m, format) {\n        var lang = m.lang();\n        return lang[key].call ? lang[key](m, format) : lang[key][index];\n    }\n\n    function padToken(func, count) {\n        return function (a) {\n            return leftZeroFill(func.call(this, a), count);\n        };\n    }\n    function ordinalizeToken(func) {\n        return function (a) {\n            var b = func.call(this, a);\n            return b + this.lang().ordinal(b);\n        };\n    }\n\n    while (ordinalizeTokens.length) {\n        i = ordinalizeTokens.pop();\n        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i]);\n    }\n    while (paddedTokens.length) {\n        i = paddedTokens.pop();\n        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);\n    }\n    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n\n    // Moment prototype object\n    function Moment(date, isUTC, lang) {\n        this._d = date;\n        this._isUTC = !!isUTC;\n        this._a = date._a || null;\n        this._lang = lang || false;\n    }\n\n    // Duration Constructor\n    function Duration(duration) {\n        var data = this._data = {},\n            years = duration.years || duration.y || 0,\n            months = duration.months || duration.M || 0,\n            weeks = duration.weeks || duration.w || 0,\n            days = duration.days || duration.d || 0,\n            hours = duration.hours || duration.h || 0,\n            minutes = duration.minutes || duration.m || 0,\n            seconds = duration.seconds || duration.s || 0,\n            milliseconds = duration.milliseconds || duration.ms || 0;\n\n        // representation for dateAddRemove\n        this._milliseconds = milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 36e5; // 1000 * 60 * 60\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = days +\n            weeks * 7;\n        // It is impossible translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = months +\n            years * 12;\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n        seconds += absRound(milliseconds / 1000);\n\n        data.seconds = seconds % 60;\n        minutes += absRound(seconds / 60);\n\n        data.minutes = minutes % 60;\n        hours += absRound(minutes / 60);\n\n        data.hours = hours % 24;\n        days += absRound(hours / 24);\n\n        days += weeks * 7;\n        data.days = days % 30;\n\n        months += absRound(days / 30);\n\n        data.months = months % 12;\n        years += absRound(months / 12);\n\n        data.years = years;\n\n        this._lang = false;\n    }\n\n\n    /************************************\n        Helpers\n    ************************************/\n\n\n    function absRound(number) {\n        if (number < 0) {\n            return Math.ceil(number);\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    // left zero fill a number\n    // see http://jsperf.com/left-zero-filling for performance comparison\n    function leftZeroFill(number, targetLength) {\n        var output = number + '';\n        while (output.length < targetLength) {\n            output = '0' + output;\n        }\n        return output;\n    }\n\n    // helper function for _.addTime and _.subtractTime\n    function addOrSubtractDurationFromMoment(mom, duration, isAdding) {\n        var ms = duration._milliseconds,\n            d = duration._days,\n            M = duration._months,\n            currentDate;\n\n        if (ms) {\n            mom._d.setTime(+mom + ms * isAdding);\n        }\n        if (d) {\n            mom.date(mom.date() + d * isAdding);\n        }\n        if (M) {\n            currentDate = mom.date();\n            mom.date(1)\n                .month(mom.month() + M * isAdding)\n                .date(Math.min(currentDate, mom.daysInMonth()));\n        }\n    }\n\n    // check if is an array\n    function isArray(input) {\n        return Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if (~~array1[i] !== ~~array2[i]) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function dateFromArray(input, asUTC, hoursOffset, minutesOffset) {\n        var i, date, forValid = [];\n        for (i = 0; i < 7; i++) {\n            forValid[i] = input[i] = (input[i] == null) ? (i === 2 ? 1 : 0) : input[i];\n        }\n        // we store whether we used utc or not in the input array\n        input[7] = forValid[7] = asUTC;\n        // if the parser flagged the input as invalid, we pass the value along\n        if (input[8] != null) {\n            forValid[8] = input[8];\n        }\n        // add the offsets to the time to be parsed so that we can have a clean array\n        // for checking isValid\n        input[3] += hoursOffset || 0;\n        input[4] += minutesOffset || 0;\n        date = new Date(0);\n        if (asUTC) {\n            date.setUTCFullYear(input[0], input[1], input[2]);\n            date.setUTCHours(input[3], input[4], input[5], input[6]);\n        } else {\n            date.setFullYear(input[0], input[1], input[2]);\n            date.setHours(input[3], input[4], input[5], input[6]);\n        }\n        date._a = forValid;\n        return date;\n    }\n\n    // Loads a language definition into the `languages` cache.  The function\n    // takes a key and optionally values.  If not in the browser and no values\n    // are provided, it will load the language file module.  As a convenience,\n    // this function also returns the language values.\n    function loadLang(key, values) {\n        var i, m,\n            parse = [];\n\n        if (!values && hasModule) {\n            values = require('./lang/' + key);\n        }\n\n        for (i = 0; i < langConfigProperties.length; i++) {\n            // If a language definition does not provide a value, inherit\n            // from English\n            values[langConfigProperties[i]] = values[langConfigProperties[i]] ||\n              languages.en[langConfigProperties[i]];\n        }\n\n        for (i = 0; i < 12; i++) {\n            m = moment([2000, i]);\n            parse[i] = new RegExp('^' + (values.months[i] || values.months(m, '')) +\n                '|^' + (values.monthsShort[i] || values.monthsShort(m, '')).replace('.', ''), 'i');\n        }\n        values.monthsParse = values.monthsParse || parse;\n\n        languages[key] = values;\n\n        return values;\n    }\n\n    // Determines which language definition to use and returns it.\n    //\n    // With no parameters, it will return the global language.  If you\n    // pass in a language key, such as 'en', it will return the\n    // definition for 'en', so long as 'en' has already been loaded using\n    // moment.lang.  If you pass in a moment or duration instance, it\n    // will decide the language based on that, or default to the global\n    // language.\n    function getLangDefinition(m) {\n        var langKey = (typeof m === 'string') && m ||\n                      m && m._lang ||\n                      null;\n\n        return langKey ? (languages[langKey] || loadLang(langKey)) : moment;\n    }\n\n\n    /************************************\n        Formatting\n    ************************************/\n\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[.*\\]/)) {\n            return input.replace(/^\\[|\\]$/g, \"\");\n        }\n        return input.replace(/\\\\/g, \"\");\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = \"\";\n            for (i = 0; i < length; i++) {\n                output += typeof array[i].call === 'function' ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return m.lang().longDateFormat[input] || input;\n        }\n\n        while (i-- && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n        }\n\n        if (!formatFunctions[format]) {\n            formatFunctions[format] = makeFormatFunction(format);\n        }\n\n        return formatFunctions[format](m);\n    }\n\n\n    /************************************\n        Parsing\n    ************************************/\n\n\n    // get the regex to find the next token\n    function getParseRegexForToken(token) {\n        switch (token) {\n        case 'DDDD':\n            return parseTokenThreeDigits;\n        case 'YYYY':\n            return parseTokenFourDigits;\n        case 'S':\n        case 'SS':\n        case 'SSS':\n        case 'DDD':\n            return parseTokenOneToThreeDigits;\n        case 'MMM':\n        case 'MMMM':\n        case 'dd':\n        case 'ddd':\n        case 'dddd':\n        case 'a':\n        case 'A':\n            return parseTokenWord;\n        case 'Z':\n        case 'ZZ':\n            return parseTokenTimezone;\n        case 'T':\n            return parseTokenT;\n        case 'MM':\n        case 'DD':\n        case 'YY':\n        case 'HH':\n        case 'hh':\n        case 'mm':\n        case 'ss':\n        case 'M':\n        case 'D':\n        case 'd':\n        case 'H':\n        case 'h':\n        case 'm':\n        case 's':\n            return parseTokenOneOrTwoDigits;\n        default :\n            return new RegExp(token.replace('\\\\', ''));\n        }\n    }\n\n    // function to convert string input to date\n    function addTimeToArrayFromToken(token, input, datePartArray, config) {\n        var a, b;\n\n        switch (token) {\n        // MONTH\n        case 'M' : // fall through to MM\n        case 'MM' :\n            datePartArray[1] = (input == null) ? 0 : ~~input - 1;\n            break;\n        case 'MMM' : // fall through to MMMM\n        case 'MMMM' :\n            for (a = 0; a < 12; a++) {\n                if (getLangDefinition().monthsParse[a].test(input)) {\n                    datePartArray[1] = a;\n                    b = true;\n                    break;\n                }\n            }\n            // if we didn't find a month name, mark the date as invalid.\n            if (!b) {\n                datePartArray[8] = false;\n            }\n            break;\n        // DAY OF MONTH\n        case 'D' : // fall through to DDDD\n        case 'DD' : // fall through to DDDD\n        case 'DDD' : // fall through to DDDD\n        case 'DDDD' :\n            if (input != null) {\n                datePartArray[2] = ~~input;\n            }\n            break;\n        // YEAR\n        case 'YY' :\n            datePartArray[0] = ~~input + (~~input > 70 ? 1900 : 2000);\n            break;\n        case 'YYYY' :\n            datePartArray[0] = ~~Math.abs(input);\n            break;\n        // AM / PM\n        case 'a' : // fall through to A\n        case 'A' :\n            config.isPm = ((input + '').toLowerCase() === 'pm');\n            break;\n        // 24 HOUR\n        case 'H' : // fall through to hh\n        case 'HH' : // fall through to hh\n        case 'h' : // fall through to hh\n        case 'hh' :\n            datePartArray[3] = ~~input;\n            break;\n        // MINUTE\n        case 'm' : // fall through to mm\n        case 'mm' :\n            datePartArray[4] = ~~input;\n            break;\n        // SECOND\n        case 's' : // fall through to ss\n        case 'ss' :\n            datePartArray[5] = ~~input;\n            break;\n        // MILLISECOND\n        case 'S' :\n        case 'SS' :\n        case 'SSS' :\n            datePartArray[6] = ~~ (('0.' + input) * 1000);\n            break;\n        // TIMEZONE\n        case 'Z' : // fall through to ZZ\n        case 'ZZ' :\n            config.isUTC = true;\n            a = (input + '').match(parseTimezoneChunker);\n            if (a && a[1]) {\n                config.tzh = ~~a[1];\n            }\n            if (a && a[2]) {\n                config.tzm = ~~a[2];\n            }\n            // reverse offsets\n            if (a && a[0] === '+') {\n                config.tzh = -config.tzh;\n                config.tzm = -config.tzm;\n            }\n            break;\n        }\n\n        // if the input is null, the date is not valid\n        if (input == null) {\n            datePartArray[8] = false;\n        }\n    }\n\n    // date from string and format string\n    function makeDateFromStringAndFormat(string, format) {\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        // We store some additional data on the array for validation\n        // datePartArray[7] is true if the Date was created with `Date.UTC` and false if created with `new Date`\n        // datePartArray[8] is false if the Date is invalid, and undefined if the validity is unknown.\n        var datePartArray = [0, 0, 1, 0, 0, 0, 0],\n            config = {\n                tzh : 0, // timezone hour offset\n                tzm : 0  // timezone minute offset\n            },\n            tokens = format.match(formattingTokens),\n            i, parsedInput;\n\n        for (i = 0; i < tokens.length; i++) {\n            parsedInput = (getParseRegexForToken(tokens[i]).exec(string) || [])[0];\n            if (parsedInput) {\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n            }\n            // don't parse if its not a known token\n            if (formatTokenFunctions[tokens[i]]) {\n                addTimeToArrayFromToken(tokens[i], parsedInput, datePartArray, config);\n            }\n        }\n        // handle am pm\n        if (config.isPm && datePartArray[3] < 12) {\n            datePartArray[3] += 12;\n        }\n        // if is 12 am, change hours to 0\n        if (config.isPm === false && datePartArray[3] === 12) {\n            datePartArray[3] = 0;\n        }\n        // return\n        return dateFromArray(datePartArray, config.isUTC, config.tzh, config.tzm);\n    }\n\n    // date from string and array of format strings\n    function makeDateFromStringAndArray(string, formats) {\n        var output,\n            inputParts = string.match(parseMultipleFormatChunker) || [],\n            formattedInputParts,\n            scoreToBeat = 99,\n            i,\n            currentDate,\n            currentScore;\n        for (i = 0; i < formats.length; i++) {\n            currentDate = makeDateFromStringAndFormat(string, formats[i]);\n            formattedInputParts = formatMoment(new Moment(currentDate), formats[i]).match(parseMultipleFormatChunker) || [];\n            currentScore = compareArrays(inputParts, formattedInputParts);\n            if (currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                output = currentDate;\n            }\n        }\n        return output;\n    }\n\n    // date from iso format\n    function makeDateFromString(string) {\n        var format = 'YYYY-MM-DDT',\n            i;\n        if (isoRegex.exec(string)) {\n            for (i = 0; i < 4; i++) {\n                if (isoTimes[i][1].exec(string)) {\n                    format += isoTimes[i][0];\n                    break;\n                }\n            }\n            return parseTokenTimezone.exec(string) ?\n                makeDateFromStringAndFormat(string, format + ' Z') :\n                makeDateFromStringAndFormat(string, format);\n        }\n        return new Date(string);\n    }\n\n\n    /************************************\n        Relative Time\n    ************************************/\n\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {\n        var rt = lang.relativeTime[string];\n        return (typeof rt === 'function') ?\n            rt(number || 1, !!withoutSuffix, string, isFuture) :\n            rt.replace(/%d/i, number || 1);\n    }\n\n    function relativeTime(milliseconds, withoutSuffix, lang) {\n        var seconds = round(Math.abs(milliseconds) / 1000),\n            minutes = round(seconds / 60),\n            hours = round(minutes / 60),\n            days = round(hours / 24),\n            years = round(days / 365),\n            args = seconds < 45 && ['s', seconds] ||\n                minutes === 1 && ['m'] ||\n                minutes < 45 && ['mm', minutes] ||\n                hours === 1 && ['h'] ||\n                hours < 22 && ['hh', hours] ||\n                days === 1 && ['d'] ||\n                days <= 25 && ['dd', days] ||\n                days <= 45 && ['M'] ||\n                days < 345 && ['MM', round(days / 30)] ||\n                years === 1 && ['y'] || ['yy', years];\n        args[2] = withoutSuffix;\n        args[3] = milliseconds > 0;\n        args[4] = lang;\n        return substituteTimeAgo.apply({}, args);\n    }\n\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n\n    moment = function (input, format) {\n        if (input === null || input === '') {\n            return null;\n        }\n        var date,\n            matched;\n        // parse Moment object\n        if (moment.isMoment(input)) {\n            return new Moment(new Date(+input._d), input._isUTC, input._lang);\n        // parse string and format\n        } else if (format) {\n            if (isArray(format)) {\n                date = makeDateFromStringAndArray(input, format);\n            } else {\n                date = makeDateFromStringAndFormat(input, format);\n            }\n        // evaluate it as a JSON-encoded date\n        } else {\n            matched = aspNetJsonRegex.exec(input);\n            date = input === undefined ? new Date() :\n                matched ? new Date(+matched[1]) :\n                input instanceof Date ? input :\n                isArray(input) ? dateFromArray(input) :\n                typeof input === 'string' ? makeDateFromString(input) :\n                new Date(input);\n        }\n\n        return new Moment(date);\n    };\n\n    // creating with utc\n    moment.utc = function (input, format) {\n        if (isArray(input)) {\n            return new Moment(dateFromArray(input, true), true);\n        }\n        // if we don't have a timezone, we need to add one to trigger parsing into utc\n        if (typeof input === 'string' && !parseTokenTimezone.exec(input)) {\n            input += ' +0000';\n            if (format) {\n                format += ' Z';\n            }\n        }\n        return moment(input, format).utc();\n    };\n\n    // creating with unix timestamp (in seconds)\n    moment.unix = function (input) {\n        return moment(input * 1000);\n    };\n\n    // duration\n    moment.duration = function (input, key) {\n        var isDuration = moment.isDuration(input),\n            isNumber = (typeof input === 'number'),\n            duration = (isDuration ? input._data : (isNumber ? {} : input)),\n            ret;\n\n        if (isNumber) {\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration) {\n            ret._lang = input._lang;\n        }\n\n        return ret;\n    };\n\n    // humanizeDuration\n    // This method is deprecated in favor of the new Duration object.  Please\n    // see the moment.duration method.\n    moment.humanizeDuration = function (num, type, withSuffix) {\n        return moment.duration(num, type === true ? null : type).humanize(type === true ? true : withSuffix);\n    };\n\n    // version number\n    moment.version = VERSION;\n\n    // default format\n    moment.defaultFormat = isoFormat;\n\n    // This function will load languages and then set the global language.  If\n    // no arguments are passed in, it will simply return the current global\n    // language key.\n    moment.lang = function (key, values) {\n        var i;\n\n        if (!key) {\n            return currentLanguage;\n        }\n        if (values || !languages[key]) {\n            loadLang(key, values);\n        }\n        if (languages[key]) {\n            // deprecated, to get the language definition variables, use the\n            // moment.fn.lang method or the getLangDefinition function.\n            for (i = 0; i < langConfigProperties.length; i++) {\n                moment[langConfigProperties[i]] = languages[key][langConfigProperties[i]];\n            }\n            moment.monthsParse = languages[key].monthsParse;\n            currentLanguage = key;\n        }\n    };\n\n    // returns language data\n    moment.langData = getLangDefinition;\n\n    // compare moment object\n    moment.isMoment = function (obj) {\n        return obj instanceof Moment;\n    };\n\n    // for typechecking Duration objects\n    moment.isDuration = function (obj) {\n        return obj instanceof Duration;\n    };\n\n    // Set default language, other languages will inherit from English.\n    moment.lang('en', {\n        months : \"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),\n        monthsShort : \"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec\".split(\"_\"),\n        weekdays : \"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),\n        weekdaysShort : \"Sun_Mon_Tue_Wed_Thu_Fri_Sat\".split(\"_\"),\n        weekdaysMin : \"Su_Mo_Tu_We_Th_Fr_Sa\".split(\"_\"),\n        longDateFormat : {\n            LT : \"h:mm A\",\n            L : \"MM/DD/YYYY\",\n            LL : \"MMMM D YYYY\",\n            LLL : \"MMMM D YYYY LT\",\n            LLLL : \"dddd, MMMM D YYYY LT\"\n        },\n        meridiem : function (hours, minutes, isLower) {\n            if (hours > 11) {\n                return isLower ? 'pm' : 'PM';\n            } else {\n                return isLower ? 'am' : 'AM';\n            }\n        },\n        calendar : {\n            sameDay : '[Today at] LT',\n            nextDay : '[Tomorrow at] LT',\n            nextWeek : 'dddd [at] LT',\n            lastDay : '[Yesterday at] LT',\n            lastWeek : '[last] dddd [at] LT',\n            sameElse : 'L'\n        },\n        relativeTime : {\n            future : \"in %s\",\n            past : \"%s ago\",\n            s : \"a few seconds\",\n            m : \"a minute\",\n            mm : \"%d minutes\",\n            h : \"an hour\",\n            hh : \"%d hours\",\n            d : \"a day\",\n            dd : \"%d days\",\n            M : \"a month\",\n            MM : \"%d months\",\n            y : \"a year\",\n            yy : \"%d years\"\n        },\n        ordinal : function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        }\n    });\n\n\n    /************************************\n        Moment Prototype\n    ************************************/\n\n\n    moment.fn = Moment.prototype = {\n\n        clone : function () {\n            return moment(this);\n        },\n\n        valueOf : function () {\n            return +this._d;\n        },\n\n        unix : function () {\n            return Math.floor(+this._d / 1000);\n        },\n\n        toString : function () {\n            return this._d.toString();\n        },\n\n        toDate : function () {\n            return this._d;\n        },\n\n        toArray : function () {\n            var m = this;\n            return [\n                m.year(),\n                m.month(),\n                m.date(),\n                m.hours(),\n                m.minutes(),\n                m.seconds(),\n                m.milliseconds(),\n                !!this._isUTC\n            ];\n        },\n\n        isValid : function () {\n            if (this._a) {\n                // if the parser finds that the input is invalid, it sets\n                // the eighth item in the input array to false.\n                if (this._a[8] != null) {\n                    return !!this._a[8];\n                }\n                return !compareArrays(this._a, (this._a[7] ? moment.utc(this._a) : moment(this._a)).toArray());\n            }\n            return !isNaN(this._d.getTime());\n        },\n\n        utc : function () {\n            this._isUTC = true;\n            return this;\n        },\n\n        local : function () {\n            this._isUTC = false;\n            return this;\n        },\n\n        format : function (inputString) {\n            return formatMoment(this, inputString ? inputString : moment.defaultFormat);\n        },\n\n        add : function (input, val) {\n            var dur = val ? moment.duration(+val, input) : moment.duration(input);\n            addOrSubtractDurationFromMoment(this, dur, 1);\n            return this;\n        },\n\n        subtract : function (input, val) {\n            var dur = val ? moment.duration(+val, input) : moment.duration(input);\n            addOrSubtractDurationFromMoment(this, dur, -1);\n            return this;\n        },\n\n        diff : function (input, val, asFloat) {\n            var inputMoment = this._isUTC ? moment(input).utc() : moment(input).local(),\n                zoneDiff = (this.zone() - inputMoment.zone()) * 6e4,\n                diff = this._d - inputMoment._d - zoneDiff,\n                year = this.year() - inputMoment.year(),\n                month = this.month() - inputMoment.month(),\n                date = this.date() - inputMoment.date(),\n                output;\n            if (val === 'months') {\n                output = year * 12 + month + date / 30;\n            } else if (val === 'years') {\n                output = year + (month + date / 30) / 12;\n            } else {\n                output = val === 'seconds' ? diff / 1e3 : // 1000\n                    val === 'minutes' ? diff / 6e4 : // 1000 * 60\n                    val === 'hours' ? diff / 36e5 : // 1000 * 60 * 60\n                    val === 'days' ? diff / 864e5 : // 1000 * 60 * 60 * 24\n                    val === 'weeks' ? diff / 6048e5 : // 1000 * 60 * 60 * 24 * 7\n                    diff;\n            }\n            return asFloat ? output : round(output);\n        },\n\n        from : function (time, withoutSuffix) {\n            return moment.duration(this.diff(time)).lang(this._lang).humanize(!withoutSuffix);\n        },\n\n        fromNow : function (withoutSuffix) {\n            return this.from(moment(), withoutSuffix);\n        },\n\n        calendar : function () {\n            var diff = this.diff(moment().sod(), 'days', true),\n                calendar = this.lang().calendar,\n                allElse = calendar.sameElse,\n                format = diff < -6 ? allElse :\n                diff < -1 ? calendar.lastWeek :\n                diff < 0 ? calendar.lastDay :\n                diff < 1 ? calendar.sameDay :\n                diff < 2 ? calendar.nextDay :\n                diff < 7 ? calendar.nextWeek : allElse;\n            return this.format(typeof format === 'function' ? format.apply(this) : format);\n        },\n\n        isLeapYear : function () {\n            var year = this.year();\n            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n        },\n\n        isDST : function () {\n            return (this.zone() < moment([this.year()]).zone() ||\n                this.zone() < moment([this.year(), 5]).zone());\n        },\n\n        day : function (input) {\n            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n            return input == null ? day :\n                this.add({ d : input - day });\n        },\n\n        startOf: function (val) {\n            // the following switch intentionally omits break keywords\n            // to utilize falling through the cases.\n            switch (val.replace(/s$/, '')) {\n            case 'year':\n                this.month(0);\n                /* falls through */\n            case 'month':\n                this.date(1);\n                /* falls through */\n            case 'day':\n                this.hours(0);\n                /* falls through */\n            case 'hour':\n                this.minutes(0);\n                /* falls through */\n            case 'minute':\n                this.seconds(0);\n                /* falls through */\n            case 'second':\n                this.milliseconds(0);\n                /* falls through */\n            }\n            return this;\n        },\n\n        endOf: function (val) {\n            return this.startOf(val).add(val.replace(/s?$/, 's'), 1).subtract('ms', 1);\n        },\n\n        sod: function () {\n            return this.clone().startOf('day');\n        },\n\n        eod: function () {\n            // end of day = start of day plus 1 day, minus 1 millisecond\n            return this.clone().endOf('day');\n        },\n\n        zone : function () {\n            return this._isUTC ? 0 : this._d.getTimezoneOffset();\n        },\n\n        daysInMonth : function () {\n            return moment.utc([this.year(), this.month() + 1, 0]).date();\n        },\n\n        // If passed a language key, it will set the language for this\n        // instance.  Otherwise, it will return the language configuration\n        // variables for this instance.\n        lang : function (lang) {\n            if (lang === undefined) {\n                return getLangDefinition(this);\n            } else {\n                this._lang = lang;\n                return this;\n            }\n        }\n    };\n\n    // helper for adding shortcuts\n    function makeGetterAndSetter(name, key) {\n        moment.fn[name] = function (input) {\n            var utc = this._isUTC ? 'UTC' : '';\n            if (input != null) {\n                this._d['set' + utc + key](input);\n                return this;\n            } else {\n                return this._d['get' + utc + key]();\n            }\n        };\n    }\n\n    // loop through and add shortcuts (Month, Date, Hours, Minutes, Seconds, Milliseconds)\n    for (i = 0; i < proxyGettersAndSetters.length; i ++) {\n        makeGetterAndSetter(proxyGettersAndSetters[i].toLowerCase(), proxyGettersAndSetters[i]);\n    }\n\n    // add shortcut for year (uses different syntax than the getter/setter 'year' == 'FullYear')\n    makeGetterAndSetter('year', 'FullYear');\n\n\n    /************************************\n        Duration Prototype\n    ************************************/\n\n\n    moment.duration.fn = Duration.prototype = {\n        weeks : function () {\n            return absRound(this.days() / 7);\n        },\n\n        valueOf : function () {\n            return this._milliseconds +\n              this._days * 864e5 +\n              this._months * 2592e6;\n        },\n\n        humanize : function (withSuffix) {\n            var difference = +this,\n                rel = this.lang().relativeTime,\n                output = relativeTime(difference, !withSuffix, this.lang()),\n                fromNow = difference <= 0 ? rel.past : rel.future;\n\n            if (withSuffix) {\n                if (typeof fromNow === 'function') {\n                    output = fromNow(output);\n                } else {\n                    output = fromNow.replace(/%s/i, output);\n                }\n            }\n\n            return output;\n        },\n\n        lang : moment.fn.lang\n    };\n\n    function makeDurationGetter(name) {\n        moment.duration.fn[name] = function () {\n            return this._data[name];\n        };\n    }\n\n    function makeDurationAsGetter(name, factor) {\n        moment.duration.fn['as' + name] = function () {\n            return +this / factor;\n        };\n    }\n\n    for (i in unitMillisecondFactors) {\n        if (unitMillisecondFactors.hasOwnProperty(i)) {\n            makeDurationAsGetter(i, unitMillisecondFactors[i]);\n            makeDurationGetter(i.toLowerCase());\n        }\n    }\n\n    makeDurationAsGetter('Weeks', 6048e5);\n\n\n    /************************************\n        Exposing Moment\n    ************************************/\n\n\n    // CommonJS module is defined\n    if (hasModule) {\n        module.exports = moment;\n    }\n    /*global ender:false */\n    if (typeof ender === 'undefined') {\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `moment` as a global object via a string identifier,\n        // for Closure Compiler \"advanced\" mode\n        this['moment'] = moment;\n    }\n    /*global define:false */\n    if (typeof define === \"function\" && define.amd) {\n        define(\"moment\", [], function () {\n            return moment;\n        });\n    }\n}).call(this);\n// moment.js\n// version : 1.7.2\n// author : Tim Wood\n// license : MIT\n// momentjs.com\n\n(function (undefined) {\n\n    /************************************\n        Constants\n    ************************************/\n\n    var moment,\n        VERSION = \"1.7.2\",\n        round = Math.round, i,\n        // internal storage for language config files\n        languages = {},\n        currentLanguage = 'en',\n\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports),\n\n        // Parameters to check for on the lang config.  This list of properties\n        // will be inherited from English if not provided in a language\n        // definition.  monthsParse is also a lang config property, but it\n        // cannot be inherited and as such cannot be enumerated here.\n        langConfigProperties = 'months|monthsShort|weekdays|weekdaysShort|weekdaysMin|longDateFormat|calendar|relativeTime|ordinal|meridiem'.split('|'),\n\n        // ASP.NET json date format regex\n        aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i,\n\n        // format tokens\n        formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|SS?S?|zz?|ZZ?|.)/g,\n        localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LT|LL?L?L?)/g,\n\n        // parsing tokens\n        parseMultipleFormatChunker = /([0-9a-zA-Z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)/gi,\n\n        // parsing token regexes\n        parseTokenOneOrTwoDigits = /\\d\\d?/, // 0 - 99\n        parseTokenOneToThreeDigits = /\\d{1,3}/, // 0 - 999\n        parseTokenThreeDigits = /\\d{3}/, // 000 - 999\n        parseTokenFourDigits = /\\d{1,4}/, // 0 - 9999\n        parseTokenWord = /[0-9a-z\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+/i, // any word characters or numbers\n        parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i, // +00:00 -00:00 +0000 -0000 or Z\n        parseTokenT = /T/i, // T (ISO seperator)\n\n        // preliminary iso regex\n        // 0000-00-00 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000\n        isoRegex = /^\\s*\\d{4}-\\d\\d-\\d\\d(T(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d\\d?\\d?)?)?)?)?([\\+\\-]\\d\\d:?\\d\\d)?)?/,\n        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',\n\n        // iso time formats and regexes\n        isoTimes = [\n            ['HH:mm:ss.S', /(T?)\\d\\d:\\d\\d:\\d\\d\\.\\d{1,3}/],\n            ['HH:mm:ss', /(T?)\\d\\d:\\d\\d:\\d\\d/],\n            ['HH:mm', /(T?)\\d\\d:\\d\\d/],\n            ['HH', /(T?)"],[1,"T"],[0,"\\d\\d"]],"start1":2382,"start2":2382,"length1":40305,"length2":9}]],"length":40281,"saved":false}
{"ts":1349703854193,"patch":[[{"diffs":[[0,"\\d-\\d\\d("],[-1,"T"],[1,"(T| )"],[0,"(\\d\\d(:\\"]],"start1":2053,"start2":2053,"length1":17,"length2":21}]],"length":40285,"saved":false}
{"ts":1349703876416,"patch":[[{"diffs":[[0,":mm:ss.S', /"],[-1,"T"],[1,"(T| )"],[0,"\\d\\d:\\d\\d:\\d"]],"start1":2248,"start2":2248,"length1":25,"length2":29},{"diffs":[[0,"HH:mm:ss', /"],[-1,"T"],[1,"(T| )"],[0,"\\d\\d:\\d\\d:\\d"]],"start1":2306,"start2":2306,"length1":25,"length2":29},{"diffs":[[0," ['HH:mm', /"],[-1,"T"],[1,"(T| )"],[0,"\\d\\d:\\d\\d/],"]],"start1":2352,"start2":2352,"length1":25,"length2":29},{"diffs":[[0,"['HH', /"],[-1,"T"],[1,"(T| )"],[0,"\\d\\d/]\n "]],"start1":2394,"start2":2394,"length1":17,"length2":21}]],"length":40301,"saved":false}
