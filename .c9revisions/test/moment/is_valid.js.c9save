{"ts":1349702615180,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var moment = require(\"../../moment\");\n\nexports.is_valid = {\n    \"array bad month\" : function (test) {\n        test.expect(2);\n\n        test.equal(moment([2010, -1]).isValid(), false, 'month -1');\n        test.equal(moment([2100, 12]).isValid(), false, 'month 12');\n\n        test.done();\n    },\n\n    \"array good month\" : function (test) {\n        test.expect(24);\n\n        for (var i = 0; i < 12; i++) {\n            test.equal(moment([2010, i]).isValid(), true, 'month ' + i);\n            test.equal(moment.utc([2010, i]).isValid(), true, 'month ' + i);\n        }\n\n        test.done();\n    },\n\n    \"array bad date\" : function (test) {\n        test.expect(4);\n\n        test.equal(moment([2010, 0, 0]).isValid(), false, 'date 0');\n        test.equal(moment([2100, 0, 32]).isValid(), false, 'date 32');\n\n        test.equal(moment.utc([2010, 0, 0]).isValid(), false, 'utc date 0');\n        test.equal(moment.utc([2100, 0, 32]).isValid(), false, 'utc date 32');\n\n        test.done();\n    },\n\n    \"array bad date leap year\" : function (test) {\n        test.expect(8);\n\n        test.equal(moment([2010, 1, 29]).isValid(), false, '2010 feb 29');\n        test.equal(moment([2100, 1, 29]).isValid(), false, '2100 feb 29');\n        test.equal(moment([2008, 1, 30]).isValid(), false, '2008 feb 30');\n        test.equal(moment([2000, 1, 30]).isValid(), false, '2000 feb 30');\n\n        test.equal(moment.utc([2010, 1, 29]).isValid(), false, 'utc 2010 feb 29');\n        test.equal(moment.utc([2100, 1, 29]).isValid(), false, 'utc 2100 feb 29');\n        test.equal(moment.utc([2008, 1, 30]).isValid(), false, 'utc 2008 feb 30');\n        test.equal(moment.utc([2000, 1, 30]).isValid(), false, 'utc 2000 feb 30');\n\n        test.done();\n    },\n\n    \"string + formats bad date\" : function (test) {\n        test.expect(9);\n\n        test.equal(moment('2020-00-00', ['YYYY-MM-DD', 'DD-MM-YYYY']).isValid(), false, 'invalid on all in array');\n        test.equal(moment('2020-00-00', ['DD-MM-YYYY', 'YYYY-MM-DD']).isValid(), false, 'invalid on all in array');\n        test.equal(moment('2020-01-01', ['YYYY-MM-DD', 'DD-MM-YYYY']).isValid(), true, 'valid on first');\n        test.equal(moment('2020-01-01', ['DD-MM-YYYY', 'YYYY-MM-DD']).isValid(), true, 'valid on last');\n        test.equal(moment('2020-01-01', ['YYYY-MM-DD', 'YYYY-DD-MM']).isValid(), true, 'valid on both');\n        test.equal(moment('2020-13-01', ['YYYY-MM-DD', 'YYYY-DD-MM']).isValid(), true, 'valid on last');\n\n        test.equal(moment('12-13-2012', ['DD-MM-YYYY', 'YYYY-MM-DD']).isValid(), false, 'month rollover');\n        test.equal(moment('12-13-2012', ['DD-MM-YYYY', 'DD-MM-YYYY']).isValid(), false, 'month rollover');\n        test.equal(moment('38-12-2012', ['DD-MM-YYYY']).isValid(), false, 'day rollover');\n\n        test.done();\n    },\n\n    \"string nonsensical\" : function (test) {\n        test.expect(1);\n\n        test.equal(moment('fail').isValid(), false, 'string \"fail\"');\n        test.done();\n    },\n\n    \"string nonsensical with format\" : function (test) {\n        test.expect(2);\n\n        test.equal(moment('fail', \"MM-DD-YYYY\").isValid(), false, 'string \"fail\" with format \"MM-DD-YYYY\"');\n        test.equal(moment(\"xx-xx-2001\", 'DD-MM-YYY').isValid(), false, 'string \"xx-xx-2001\" with format \"MM-DD-YYYY\"');\n        test.done();\n    },\n\n    \"string with bad month name\" : function (test) {\n        test.expect(2);\n\n        moment.lang('en');\n\n        test.equal(moment('01-Nam-2012', 'DD-MMM-YYYY').isValid(), false, '\"Nam\" is an invalid month');\n        test.equal(moment('01-Aug-2012', 'DD-MMM-YYYY').isValid(), true, '\"Aug\" is a valid month');\n\n        test.done();\n    },\n\n    \"invalid string iso 8601\" : function (test) {\n\n        var tests = [\n            '2010-00-00',\n            '2010-01-00',\n            '2010-01-40',\n            '2010-01-01T24',\n            '2010-01-01T23:60',\n            '2010-01-01T23:59:60'\n        ];\n\n        test.expect(tests.length * 2);\n\n        for (var i = 0; i < tests.length; i++) {\n            test.equal(moment(tests[i]).isValid(), false, tests[i] + ' should be invalid');\n            test.equal(moment.utc(tests[i]).isValid(), false, tests[i] + ' should be invalid');\n        }\n        test.done();\n    },\n\n    \"invalid string iso 8601 + timezone\" : function (test) {\n\n        var tests = [\n            '2010-00-00+00:00',\n            '2010-01-00+00:00',\n            '2010-01-40+00:00',\n            '2010-01-40T24+00:00',\n            '2010-01-40T23:60+00:00',\n            '2010-01-40T23:59:60+00:00',\n            '2010-01-40T23:59:59.9999+00:00'\n        ];\n\n        test.expect(tests.length * 2);\n\n        for (var i = 0; i < tests.length; i++) {\n            test.equal(moment(tests[i]).isValid(), false, tests[i] + ' should be invalid');\n            test.equal(moment.utc(tests[i]).isValid(), false, tests[i] + ' should be invalid');\n        }\n        test.done();\n    },\n\n    \"valid string iso 8601 + timezone\" : function (test) {\n        var tests = [\n            '2010-01-01',\n            '2010-01-30',\n            '2010-01-30T23+00:00',\n            '2010-01-30T23:59+00:00',\n            '2010-01-30T23:59:59+00:00',\n            '2010-01-30T23:59:59.999+00:00',\n            '2010-01-30T23:59:59.999-07:00',\n            '2010-01-30T00:00:00.000+07:00'\n        ];\n\n        test.expect(tests.length * 2);\n\n        for (var i = 0; i < tests.length; i++) {\n            test.equal(moment(tests[i]).isValid(), true, tests[i] + ' should be valid');\n            test.equal(moment.utc(tests[i]).isValid(), true, tests[i] + ' should be valid');\n        }\n        test.done();\n    }\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":5585}]],"length":5585}
